<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡雷的博客</title>
  
  <subtitle>HULEI BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dageger.cn/"/>
  <updated>2018-07-04T07:25:43.968Z</updated>
  <id>http://dageger.cn/</id>
  
  <author>
    <name>hu lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5分钟写出一个不错的loading界面</title>
    <link href="http://dageger.cn/2018/07/04/fe-loading-demo/"/>
    <id>http://dageger.cn/2018/07/04/fe-loading-demo/</id>
    <published>2018-07-04T07:06:10.000Z</published>
    <updated>2018-07-04T07:25:43.968Z</updated>
    
    <content type="html"><![CDATA[<p>首先，让我们先看一下效果图。</p><p><img src="./1_AF1rXY_iumutiVOMSXf_LQ.gif" alt=""></p><p>这就是我们将要实现的 <a href="https://codepen.io/ohansemmanuel/pen/ZxOjGx" target="_blank" rel="external">DEMO</a>。</p><p>是不是觉得看起来很眼熟？</p><p>如果眼熟的话，那你可能在 <a href="https://slack.com" target="_blank" rel="external">Slack</a> 上见过它！</p><p>让我们只使用 css 和 html，来实现一下这个 loading 页面吧！</p><p>如果你想小试身手，可以在 <a href="http://codepen.io" target="_blank" rel="external">Codepen</a> 上创建一个 pen，编写教程代码。</p><p>现在，让我们开始吧！</p><h4 id="1-添加-class-作为标记"><a href="#1-添加-class-作为标记" class="headerlink" title="1. 添加 class 作为标记"></a>1. 添加 class 作为标记</h4><p>html 部分很简单，如下面代码所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;loading&quot;&gt;</div><div class="line"></div><div class="line">For new sidebar colors, click your workspace name, then     Preferences &gt; Sidebar &gt; Theme</div><div class="line"></div><div class="line">&lt;span class=&quot;loading__author&quot;&gt; - Your friends at Slack&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;loading__anim&quot;&gt;&lt;/span&gt;</div><div class="line"></div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>是不是很简单？</p><p>如果你不清楚为什么类名中出现了破折号，我在 <a href="https://medium.freecodecamp.org/css-naming-conventions-that-will-save-you-hours-of-debugging-35cea737d849" target="_blank" rel="external">这篇文章</a> 中解释了背后的原因。</p><p>现在我们有一些文本，以及一个类名为 <code>loading_anim</code> 的 span 标签。</p><p>效果图如下：</p><p><img src="./1_RpS6k11QbgHRIuAvy1Hw5Q.png" alt=""></p><p>还不赖，对吧？</p><h4 id="2-将内容居中"><a href="#2-将内容居中" class="headerlink" title="2. 将内容居中"></a>2. 将内容居中</h4><p>现在的效果并不理想，下一步我们将 class 为 <code>.loading</code> 的 session 标签在页面上居中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">  min-height: 100vh;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="./1_MPjfL4fwZlLkoja4cNg-Zg.png" alt=""></p><p>现在居中了！</p><p>有没有看起来好一点？</p><h4 id="3-设置加载文本的样式"><a href="#3-设置加载文本的样式" class="headerlink" title="3. 设置加载文本的样式"></a>3. 设置加载文本的样式</h4><p>现在，让我们设置 class 为 <code>.loading</code> 的文本样式，使其看上去更棒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.loading &#123;</div><div class="line">  max-width: 50%;</div><div class="line">  line-height: 1.4;</div><div class="line">  font-size: 1.2rem;</div><div class="line">  font-weight: bold;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="./1_wmMG_h5lJURLsYEZLv8ltw.png" alt=""></p><h4 id="4-设置下方-loading-author-的样式"><a href="#4-设置下方-loading-author-的样式" class="headerlink" title="4. 设置下方 .loading_author 的样式"></a>4. 设置下方 <code>.loading_author</code> 的样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.loading__author &#123;</div><div class="line">  font-weight: normal;</div><div class="line">  font-size: 0.9rem;</div><div class="line">  color: rgba(189,189,189 ,1);</div><div class="line">  margin: 0.6rem 0 2rem 0;</div><div class="line">  display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看看效果！</p><p><img src="./1_uok3Fg7Kqd8ASbONmK1RSA.png" alt=""></p><h4 id="5-创建-loading-动画"><a href="#5-创建-loading-动画" class="headerlink" title="5. 创建 loading 动画"></a>5. 创建 loading 动画</h4><p>终于到了备受期待的一步。这是最长的一个步骤，在此之前我会花一些时间确保你了解它的工作原理。</p><p>如果您遇到困难，请发表评论，我很乐意提供帮助。</p><p>再回顾一遍 loading 的效果。</p><p><img src="./1_AF1rXY_iumutiVOMSXf_LQ.gif" alt=""></p><p>我们可以看到 loading 圆环一半是蓝色，另一半是灰色的。默认情况下，<code>HTML</code> 元素不会被切分。所有HTML元素可以看作<em>盒子</em>。第一个真正的挑战是如何使 class 为 <code>.loading__anim</code> 的元素包含两种边框颜色。</p><p>如果你现在还没有太明白，不要担心。后面会继续进行讲解。</p><p>首先，让我们先定义 loading 的大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.loading__anim &#123;</div><div class="line">  width: 35px;</div><div class="line">  height: 35px;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>现在，loading 组件与文本位于同一行，这是因为 <code>span</code> 标签是 html 中的内联元素。 </p><p>我们现在修改样式，使其在另一行展示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.loading__anim &#123;</div><div class="line">   width: 35px;</div><div class="line">   height: 35px;</div><div class="line">   display: inline-block;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>最后，让我们为其设置 border 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.loading__anim &#123;</div><div class="line">   width: 35px;</div><div class="line">   height: 35px;</div><div class="line">   display: inline-block;</div><div class="line">   border: 5px solid rgba(189,189,189 ,0.25);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>在元素周围会形成宽度为 5px 的灰色边框。</p><p>下方为效果图。</p><p><img src="./1_6IaPRnPBuODTJT6mm9dNFw.png" alt=""></p><p>显示出一个灰色的边框。</p><p>让我们继续完善它。</p><p>一个元素有四条边，<code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code>。</p><p>我们之前设置的 <code>border</code> 对四个边都实现了相同的渲染。</p><p>我们现在需要对 loading 组件的边框设置不同的颜色。</p><p>无论你选择哪条边都可以，在下方代码中以 <code>top</code> 和 <code>left</code> 举例演示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.loading__anim &#123;</div><div class="line">  width: 35px;</div><div class="line">  height: 35px;</div><div class="line">  display: inline-block;</div><div class="line">  border: 5px solid rgba(189,189,189 ,0.25);</div><div class="line">  border-left-color: rgba(3,155,229 ,1);</div><div class="line">  border-top-color: rgba(3,155,229 ,1);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>现在，<code>left</code> 和 <code>top</code> 边界将呈现蓝色。效果图如下：</p><p><img src="./1_bq8bUGVNglafbnDDj_beFw.png" alt=""></p><p>看起来还可以。</p><p>我们马上要成功了！</p><p>这个 loading 组件是圆的，而不是方的。让我们通过给 <code>.loader__anim</code> 组件设置 <code>border-radius</code> 属性为 <code>50%</code>，来改变它的形状。</p><p>效果图如下：</p><p><img src="./1_Krr3W7AwgW3ZThim62VZtg.png" alt=""></p><p>不是很差，是吧？</p><p>最后一步是制作动画。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@keyframes rotate &#123;</div><div class="line"> to &#123;</div><div class="line">  transform: rotate(1turn)</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>希望您对 <a href="https://www.w3schools.com/css/css3_animations.asp" target="_blank" rel="external">CSS 动画</a> 有所了解。<code>1 turn</code> 等于 <code>360 deg</code>，表示完整的转了一个 360 度的圈。</p><p>并按如下方式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation: rotate 600ms infinite linear;</div></pre></td></tr></table></figure><p>哟！我们做到了！</p><p>请看最终效果图。</p><p><img src="./1_DQFXH8zH4RpOFOqOb4DbMg.gif" alt=""></p><p>lo hicimos! (西班牙语)</p><p>是不是很酷？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，让我们先看一下效果图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./1_AF1rXY_iumutiVOMSXf_LQ.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就是我们将要实现的 &lt;a href=&quot;https://codepen.io/ohansemmanuel/pen/Z
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://dageger.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>反击爬虫，前端工程师的脑洞可以有多大？</title>
    <link href="http://dageger.cn/2018/07/03/fe-crawler/"/>
    <id>http://dageger.cn/2018/07/03/fe-crawler/</id>
    <published>2018-07-03T09:59:23.000Z</published>
    <updated>2018-07-04T06:40:17.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。<br>而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是爬虫与反爬虫这一话题的由来。</p><h2 id="常见反爬虫策略"><a href="#常见反爬虫策略" class="headerlink" title="常见反爬虫策略"></a>常见反爬虫策略</h2><p>但是世界上没有一个网站，能做到完美地反爬虫。</p><p>如果页面希望能在用户面前正常展示，同时又不给爬虫机会，就必须要做到识别真人与机器人。因此工程师们做了各种尝试，这些策略大多采用于后端，也是目前比较常规单有效的手段，比如：</p><ul><li>User-Agent + Referer检测</li><li>账号及Cookie验证</li><li>验证码</li><li>IP限制频次</li></ul><p>而爬虫是可以无限逼近于真人的，比如：</p><ul><li>chrome headless或phantomjs来模拟浏览器环境</li><li>tesseract识别验证码</li><li>代理IP淘宝就能买到</li></ul><p>所以我们说，100%的反爬虫策略？不存在的。<br>更多的是体力活，是个难易程度的问题。</p><p>不过作为前端工程师，我们可以增加一下游戏难度，设计出一些很(sang)有(xin)意(bing)思(kuang)的反爬虫策略。</p><h2 id="前端与反爬虫"><a href="#前端与反爬虫" class="headerlink" title="前端与反爬虫"></a>前端与反爬虫</h2><h3 id="前端与反爬虫-1"><a href="#前端与反爬虫-1" class="headerlink" title="前端与反爬虫"></a>前端与反爬虫</h3><p>例子：<a href="http://maoyan.com/films/342601" target="_blank" rel="external">猫眼电影</a></p><p>猫眼电影里，对于票房数据，展示的并不是纯粹的数字。<br>页面使用了font-face定义了字符集，并通过unicode去映射展示。也就是说，除去图像识别，必须同时爬取字符集，才能识别出数字。</p><p><img src="./Fr4tKH.jpg" alt=""></p><p>并且，每次刷新页面，字符集的url都是有变化的，无疑更大难度地增加了爬取成本。</p><p><img src="./FnBGGXcZgJ.png" alt=""></p><h3 id="BACKGROUND拼凑式"><a href="#BACKGROUND拼凑式" class="headerlink" title="BACKGROUND拼凑式"></a>BACKGROUND拼凑式</h3><p>例子：<a href="http://www.meituan.com/dianying/342601?#content" target="_blank" rel="external">美团</a></p><p>与font的策略类似，美团里用到的是background拼凑。数字其实是图片，根据不同的background偏移，显示出不同的字符。</p><p><img src="./FvAROr.png" alt=""></p><p>并且不同页面，图片的字符排序也是有区别的。不过理论上只需生成0-9与小数点，为何有重复字符就不是很懂。</p><p>页面A：<br><img src="./Fp_3RGH.png" alt=""><br>页面B：<br><img src="./FiuQ2n.png" alt=""></p><h3 id="字符穿插式"><a href="#字符穿插式" class="headerlink" title="字符穿插式"></a>字符穿插式</h3><p>例子：<a href="https://mp.weixin.qq.com/s?biz=MzI0MDYwNjk2OA==&amp;mid=2247484365&amp;idx=4&amp;sn=291a93e8a4ce6e90d3b6ef8b98fe09c4&amp;chksm=e919085ade6e814cc037ecf6a873f22da0e492911a4e539e6f8fdeff022806b4d248c4d54194&amp;scene=4" target="_blank" rel="external">微信公众号文章</a></p><p>某些微信公众号的文章里，穿插了各种迷之字符，并且通过样式把这些字符隐藏掉。<br>这种方式虽然令人震惊…但其实没有太大的识别与过滤难度，甚至可以做得更好，不过也算是一种脑洞吧。</p><p><img src="./FoFF_V.png" alt=""></p><p>对了，我的手机流量可以找谁报销吗？</p><h3 id="伪元素隐藏式"><a href="#伪元素隐藏式" class="headerlink" title="伪元素隐藏式"></a>伪元素隐藏式</h3><p>例子：汽车之家</p><p>汽车之家里，把关键的厂商信息，做到了伪元素的content里。<br>这也是一种思路：爬取网页，必须得解析css，需要拿到伪元素的content，这就提升了爬虫的难度。</p><p><img src="./FslsPb.png" alt=""></p><h3 id="元素定位覆盖式"><a href="#元素定位覆盖式" class="headerlink" title="元素定位覆盖式"></a>元素定位覆盖式</h3><p>例子：<a href="https://flight.qunar.com/site/oneway_list.htm?searchDepartureAirport=%E5%B9%BF%E5%B7%9E&amp;searchArrivalAirport=%E5%8C%97%E4%BA%AC&amp;searchDepartureTime=2017-07-06&amp;searchArrivalTime=2017-07-09&amp;nextNDays=0&amp;startSearch=true&amp;fromCode=CAN&amp;toCode=BJS&amp;from=qunarindex&amp;lowestPrice=null" target="_blank" rel="external">去哪儿</a></p><p>还有热爱数学的去哪儿，对于一个4位数字的机票价格，先用四个<code>i</code>标签渲染，再用两个b标签去绝对定位偏移量，覆盖故意展示错误的<code>i</code>标签，最后在视觉上形成正确的价格…</p><p><img src="./FtZdGF.png" alt=""></p><p>这说明爬虫会解析css还不行，还得会做数学题。</p><h3 id="IFRAME异步加载式"><a href="#IFRAME异步加载式" class="headerlink" title="IFRAME异步加载式"></a>IFRAME异步加载式</h3><p>网易云音乐页面一打开，html源码里几乎只有一个<code>iframe</code>，并且它的<code>src</code>是空白的：<code>about:blank</code>。接着js开始运行，把整个页面的框架异步塞到了<code>iframe</code>里面…</p><p><img src="./FjHp4gqX.png" alt=""></p><p>不过这个方式带来的难度并不大，只是在异步与iframe处理上绕了个弯（或者有其他原因，不完全是基于反爬虫考虑），无论你是用selenium还是phantom，都有API可以拿到iframe里面的content信息。</p><h3 id="字符分割式"><a href="#字符分割式" class="headerlink" title="字符分割式"></a>字符分割式</h3><p>例子：<a href="http://www.goubanjia.com/" target="_blank" rel="external">全网代理IP</a></p><p>在一些展示代理IP信息的页面，对于IP的保护也是大费周折。</p><p><img src="./FiY93.png" alt=""></p><p>他们会先把IP的数字与符号分割成dom节点，再在中间插入迷惑人的数字，如果爬虫不知道这个策略，还会以为自己成功拿到了数值；不过如果爬虫注意到，就很好解决了。</p><h3 id="字符集替换式"><a href="#字符集替换式" class="headerlink" title="字符集替换式"></a>字符集替换式</h3><p>例子：<a href="https://m.flight.qunar.com/ncs/page/flightlist?depCity=%E5%8C%97%E4%BA%AC&amp;arrCity=%E4%B8%8A%E6%B5%B7&amp;goDate=2017-07-05&amp;backDate=&amp;sort=&amp;airLine=&amp;from=" target="_blank" rel="external">去哪儿移动侧</a></p><p>同样会欺骗爬虫的还有去哪儿的移动版</p><p><img src="./Ft3i0Tb.png" alt=""></p><p>html里明明写的3211，视觉上展示的却是1233。原来他们重新定义了字符集，3与1的顺序刚好调换得来的结果…</p><p><img src="./FoMbTu1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。&lt;br&gt;而反过来，又有一些情景，我们不希望内容能被轻易获取
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="爬虫" scheme="http://dageger.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Web性能优化与HTTP/2</title>
    <link href="http://dageger.cn/2018/03/01/fe-web-http/"/>
    <id>http://dageger.cn/2018/03/01/fe-web-http/</id>
    <published>2018-03-01T11:59:55.000Z</published>
    <updated>2018-06-15T08:26:16.215Z</updated>
    
    <content type="html"><![CDATA[<p>如今，互联网上的内容越来越丰富，过去几年时间，一个页面产生请求和整个大小都一直增长，这个趋势还会一直保持，对页面性能优化也要马不停蹄。</p><p>一个页面，会经历过加载资源，执行脚本，渲染界面的过程。我们知道，100ms对于计算机来说，可以干很多事情了，但是对于网络请求，可能一次RTT就没了。因此，页面加载对于Web性能是重中之重。</p><p>加载的快慢可以总结成受两个因素影响：<code>阻塞</code>与<code>延迟</code>。</p><p>1、阻塞。浏览器在解析到脚本时，会阻塞页面，等到脚本下载执行完才继续解析文档。此外，浏览器还会限制同域下的并行请求数，超过这个限制后的请求就会被阻塞住。</p><p>2、延迟。网络请求都不可避免会有延迟，网页上的延迟有两种，一是DNS查询，二是TCP连接。</p><p>克服这些缺点，我们有一些约定俗成的方案：</p><ul><li>静态资源要支持304，开启HTTP缓存控制</li><li>开启gzip，压缩HTTP body</li><li>css放在html的head里，js在body底部</li><li>合并请求</li><li>使用雪碧图</li><li>域名分区（突破并行限制，也避免传输过多cookie）</li><li>使用cdn</li></ul><!-- * ![](./cover.jpg) --><p>这些方案基本都能立竿见影。但是，对于追求极致（KPI）的我们，这些还是远远不够的。我们从页面开始加载时说起。</p><h1 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h1><p>重定向意味着要重新发起请求，当然我们没事也不会乱跳。这里要说的一种重定向是，访问HTTP站点，跳转到HTTPS。</p><p>避免这种跳转，我们可以用HSTS策略，就是告诉浏览器，以后访问我这个站点，必须用HTTPS协议来访问，让浏览器帮忙做转换，而不是请求到了服务器后，才知道要转换。只需要在响应头部加上 <code>Strict-Transport-Security: max-age=31536000</code> 即可。</p><h1 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h1><p>DNS查询需要个RTT时间，在浏览器级别，系统级别都会有层DNS缓存，之前解析过的可以直接从本机缓存获取，以减少延迟。</p><p>Web标准提供了一种DNS预解析技术，因为服务器是知道页面即将会发生哪些请求的，那我们可以在页面顶部，插入 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//host/&quot;&gt;</code>，让浏览器先解析一下这个域名。那么，后续扫到同域的请求，就可以直接从DNS缓存获取了。</p><p>此外，Web标准也提供prefetch，prerender的预加载技术。prefectch会在浏览器空闲的时候，向所提供的链接发起请求，而prerender不仅会请求，还会帮你在后台渲染页面。如果在一个页面中，你知道用户有很大概率去点某个链接，可以尝试把这个链接加到prefetch或prerender，那么用户就会秒开这个页面了。</p><h1 id="使用TCP、TLS最佳实践"><a href="#使用TCP、TLS最佳实践" class="headerlink" title="使用TCP、TLS最佳实践"></a>使用TCP、TLS最佳实践</h1><p>HTTP请求要经过建立TCP连接这一步，而TCP为了可靠传输，建立连接需要三次握手。如果网站又接入了HTTPS，那还要额外多两次RTT时间以建立安全通道，这样耗费了很多时间。HTTP是建立在TCP、TLS之上，那么TCP的最佳实践，SSL的优化都是适用于HTTP的优化。</p><p>比如TCP慢启动过程非常影响性能的，我们可以把初始窗口调大，让慢启动更快。对于TLS可用缓存session_ticket之类的优化可以减少一次RTT。</p><h1 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h1><p>对于一些简单的页面，CSS样式和JavaScript脚本甚至图片，可以不必使用外联的方式引入，直接把子资源内嵌到HTML里，图片可以用base64编码内嵌，这相当于请求页面时，服务器顺便把子资源给一共推送过去了。传输的内容都一样，但减少好多请求了，自然节省不少时间。</p><p>不过这样做的缺点是浏览器无法缓存这些子资源，这种做法只能降低首次加载时间，所以需要看取舍了。可能比较适用于一次性的页面，类似活动之类的。</p><h1 id="手动管理缓存"><a href="#手动管理缓存" class="headerlink" title="手动管理缓存"></a>手动管理缓存</h1><p>为了代码架构清晰，便于维护，我们都会用模块化的方式去编码，每个模块一个文件，这样带来的问题是一个页面需要很多文件，要很多请求，这对页面性能是不利的。合并是解决这个问题的好方法，但又因为HTTP缓存机制是基于URL的，只要某个模块一改动，整个合并资源都要重新下载。</p><p>在对性能要求较高，比如在移动设备环境上，我们可以利用HTML5中的localStorage特性，来实现手动控制缓存。大概的思路是，在定义模块时，同时将模块的代码和版本号分别储存到localStorage，在下一次打算请求模块之前，我们先判断模块的最新版本是不是在localStorage中，将不存在的模块组合在一起，请求动态合并的资源。</p><p>不过，这种方案可能会引发安全问题。假如同域下的其他页面被XSS攻击，坏人就可以篡改localStorage的内容，可能导致原来的页面代码被植入恶意程序。解决的方法是，在执行模块之前，算一下代码摘要，对比下服务器给的该模块的摘要，再决定是否使用。也可以使用SRI策略，由浏览器帮你做校验。</p><h1 id="HTTP持久连接"><a href="#HTTP持久连接" class="headerlink" title="HTTP持久连接"></a>HTTP持久连接</h1><p>HTTP持久连接可以重用已建立的TCP连接，减少三次握手的RTT延迟。浏览器在请求时带上 <code>connection: keep-alive</code> 的头部，服务器收到后就要发送完响应后保持连接一段时间，浏览器在下一次对该服务器的请求时，就可以直接拿来用。</p><p>以往，浏览器判断响应数据是否接收完毕，是看连接是否关闭。在使用持久连接后，就不能这样了，这就要求服务器对持久连接的响应头部一定要返回content-length标识body的长度，供浏览器判断界限。有时，content-length的方法并不是太准确，也可以使用 <code>Transfer-Encoding: chunked</code> 头部发送一串一串的数据，最后由长度为0的chunked标识结束。</p><h1 id="HTTP管线化"><a href="#HTTP管线化" class="headerlink" title="HTTP管线化"></a>HTTP管线化</h1><p>HTTP管线化可以克服同域并行请求限制带来的阻塞，它是建立在持久连接之上，是把所有请求一并发给服务器，但是服务器需要按照顺序一个一个响应，而不是等到一个响应回来才能发下一个请求，这样就节省了很多请求到服务器的时间。不过，HTTP管线化仍旧有阻塞的问题，若上一响应迟迟不回，后面的响应都会被阻塞到。</p><h1 id="bigpipe"><a href="#bigpipe" class="headerlink" title="bigpipe"></a>bigpipe</h1><p>目前大部分模型都是，服务器把逻辑处理完之后，一次性把整个响应输出。这里存在一个阻塞的过程，逻辑处理一般都涉及IO操作的都比较慢，而现代浏览器都支持边接收数据边渲染，所以其实服务器可以接收到请求时就把页面框架flush出来，如果页面包含多个较独立部分，也可以每处理完一部分就马上输出，这样可以缩短白屏。从用户感受上可能会更好，页面上一直有所反应，而不是一直白屏，完全不知道你在干嘛。</p><p>各种各样的优化，都在填HTTP/1.x留下的坑，HTTP/2带着填坑的使命，从根本上去解决这些问题。HTTP/1.x是一个文本协议，这注定它是非常冗余的协议，HTTP/2改变了这一点，在HTTP/1.x的语义上，将文本数据封装在帧里，并采用二进制编码。</p><p>下图中binary framing就是二进制分帧层，这里会将HTTP/1.x的header翻译成headers类型的帧，将body翻译成data类型的帧。</p><p>HTTP/2的性能怎样，akamai的这个demo(<a href="https://http2.akamai.com/demo)估计会让你很兴奋。" target="_blank" rel="external">https://http2.akamai.com/demo)估计会让你很兴奋。</a></p><p>下面详细介绍下HTTP/2。</p><h1 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h1><p>在HTTP/2中，有两个非常重要的概念：帧（frame）和流（stream）。</p><p>1、帧（frame）</p><p>HTTP/2中数据传输的最小单位，因此帧不仅要细分表达HTTP/1.x中的各个部份，也优化了HTTP/1.x表达得不好的地方，同时还增加了HTTP/1.x表达不了的方式。</p><p>每一帧都包含几个字段，有length、type、flags、stream identifier、frame playload等，其中type代表帧的类型，在HTTP/2的标准中定义了10种不同的类型，包括上面所说的<code>HEADERS frame</code>和 <code>DATA frame</code>。此外还有</p><p><code>PRIORITY</code>（设置流的优先级）</p><p><code>RST_STREAM</code>（终止流）</p><p><code>SETTINGS</code>（设置此连接的参数）</p><p><code>PUSH_PROMISE</code>（服务器推送）</p><p><code>PING</code>（测量RTT）</p><p><code>GOAWAY</code>（终止连接）</p><p><code>WINDOW_UPDATE</code>（流量控制）</p><p><code>CONTINUATION</code>（继续传输头部数据）</p><h1 id="2、流（stream）"><a href="#2、流（stream）" class="headerlink" title="2、流（stream）"></a>2、流（stream）</h1><p>“流”在HTTP/2中是一个逻辑上的概念，就是说在一个TCP连接上，我们可以向对方不断发送一个个的消息，这里每一个消息看成是一帧，而每一帧有个stream identifier的字段标明这一帧属于哪个“流”，然后在对方接收时，根据stream identifier拼接每个“流”的所有帧组成一整块数据。我们把HTTP/1.x每个请求都当作一个“流”，那么请求化成多个流，请求响应数据切成多个帧，不同流中的帧交错地发送给对方，这就是HTTP/2中的多路复用。</p><p>从上图我们可以留意到：</p><p>不同的流在交错发送；</p><p><code>HEADERS</code> 帧在 <code>DATA</code> 帧前面；</p><p>流的ID都是奇数，说明是由客户端发起的，这是标准规定的，那么服务端发起的就是偶数了。</p><p>多路复用让HTTP连接变得很廉价，只需要创建一个新流即可，这不需要多少时间，而在HTTP/1.x时代却要经历三次握手时间或者队首阻塞等问题。而且创建新流默认是无限制的，也就是可以无限制的并行请求下载。不过，HTTP/2还是提供了 <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> 字段在 <code>SETTINGS</code> 帧上设置，可以限制并发流数目，标准上建议不要低于100以保证性能。</p><p>优化Web性能有一个常用的技术，就是图片延迟加载，目的是除了节省流量外，还能避免图片资源与其他重要的脚本资源竞争下载。</p><p>HTTP/2提供了流的优先级与依赖性这种机制，可用 <code>HEADERS</code> 帧或 <code>PRIORITY</code> 帧设置，不过协议并没有提供如何处理优先级的具体算法，这可由服务器灵活应对。我用个例子来说明这个机制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"a.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"b.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>浏览器是边下载边解析的，文档解析器首先遇到a.js，它就会去下载并且阻塞页面，同时，资源探测器会继续向下扫描，发现a.jpg、b.jpg和style.css并服务器发起请求。在没有优先级机制时，a.jpg、b.jpg会跟重要的a.js、style.css竞争下载，但在HTTP/2中，浏览器可以给a.jpg、b.jpg设置较低的优先级，另外依赖关系为</p><p>这样服务器根据优先级信息，首先吐出a.js、style.css，再吐出图片，因此页面在没有图片的情况下提前进入可交互状态。例子所说的是在浏览器层面上harcode的一个优先级策略，再比如上文提到的prefetch就可以给一个更低的优先级。在代码层面上，也许之后会提供一些控制优先级的特性，类似于目前只有IE支持的lazyload attribute。</p><h1 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h1><p>作为HTTP/2的一个重磅新功能，我们不要简单理解字面意思，其实不是你想推，想推就能推的，服务器要遵循请求-响应这个模型，只不过服务器对同一请求可以推送多个响应。客户端在交换 <code>SETTINGS</code> 帧时，设置字段 <code>SETTINGS_ENABLE_PUSH（0x2）</code> 为1显式允许服务器推送。</p><p>在HTTP/1.x时代，其实我们已经体验过了“服务器推送”，就是资源内嵌到HTML里。服务器在响应HTML时，就已经知道浏览器会请求哪些子资源了，这时一并响应这些子资源，可以节省了服务器到浏览器以及浏览器解析再发请求的这段延迟。但是内联的问题是浏览器不会缓存这些数据，这意味要浪费很多流量，而且有缓存时网页性能还是很好的。</p><p>服务器推送解决了这个问题。服务器在接受到请求时，分析出要推送的资源，先发个 <code>PUSH_PROMISE</code> 帧给浏览器。此帧包含一个新的流ID，还有<code>header block fragment</code>字段，内容是请求的头部信息，可理解为服务器模拟浏览器发起请求，然后再发送各个<code>response header</code>和<code>response body</code>。浏览器收到 <code>PUSH_PROMISE</code> 帧时，根据<code>header block fragment</code>字段里的url，可以知道当前有没有缓存，从而判断是否要接收。如果不要，浏览器就要发送个 <code>RST_STREAM</code> 来终止服务器推送。</p><p>如果浏览器不要这个推送，就会出现浪费流量的现象，因为整个过程都是异步的，在服务器接收到RST_STREAM时，响应很有可能部份发出或者全部发出了。这种情况只能视场景而定，若是流量浪费不能容忍，我们可以使用prefetch来替代，让浏览器尽早发现需要的资源，而HTTP/2中创建新的请求并不需要多少时间，所以大概多了个RTT的时间。</p><h1 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h1><p>服务器推送，此推送非彼推送，一开始以为，是不是以后可以抛弃轮询这种技术了？并不是，该轮询还是要轮询。那么，在开启keep-alive的情况下，轮询在HTTP/2中的性能没什么提升吗？也并不是。</p><p>在HTTP/1.x中首部是没有压缩的，gzip只会压缩body，HTTP/2提供了首部压缩方案。一般轮询请求首部，特别是cookie占用很多大部份空间，首部压缩使得整个HTTP数据包小了很多，传输也就会更快。</p><p>刚开始spdy提出的首部压缩方案比较简单粗暴，直接像压缩body那样压缩首部，这看起来好像没什么不妥，但是有安全隐患，会有受到CRIME式攻击的可能性。这种攻击方法简单说，就是不断地利用已知数据去探测密文，达到破解的目的。无损压缩算法会有个特性，数据越冗余，压缩效率越好。而首部中的很多字段是已知的，我们只要构造个请求，请求中带有首部的某个字段，经压缩再加密后的密文长度就会有所变化，然后不断构造猜测该字段的值，同时观察密文的长度，慢慢地确定首部字段的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /pwd=0 HTTP/1.1</div><div class="line">Cookie: pwd=123</div><div class="line"></div><div class="line">GET /pwd=1 HTTP/1.1</div><div class="line">Cookie: pwd=123</div></pre></td></tr></table></figure><p>我们会发现，前者的密文长度比后者长，这样就确定了“d”，再慢慢的猜测，达到破解的目的。</p><p>HTTP/2中抛弃了这种方案，用专门设计的HPACK。它是在服务器和客户端各维护一个“首部表”，表中用索引代表首部名，或者首部键-值对，上一次发送两端都会记住已发送过哪些首部，下一次发送只需要传输差异的数据，相同的数据直接用索引表示即可，另外还可以选择地对首部值压缩后再传输。按照这样的设计，两次轮询请求的首部基本是一样的，那之后的请求基本只需要发送几个索引就可以了。</p><p>“首部表”有两种，一种是静态表，即HTTP/2协议内置了常用的一些首部名和首部键值对。另一种是动态表，保存自定义的首部或五花八门的键值对等，动态表可以通过SETTINGS帧的SETTINGS_HEADER_TABLE_SIZE规定大小。</p><p>在尚未知道服务器是否支持HTTP/2时，http请求头部加上upgrade: h2c，表明客户端支持HTTP/2，询问服务器要不要切换协议。</p><p>浏览器同时发送HTTP2-Settings头部，带上base64编码的SETTINGS frame。</p><p>对于https请求，是在TLS握手时进行协商，浏览器发送ClientHello时，带上h2标志，表明客户端支持HTTP/2。</p><p>若服务器不支持，则忽略upgrade头部，正常响应。若支持，则发送101响应，以空行结束响应，并开始发送HTTP/2帧。</p><p>服务器要先响应connection preface，带上SETTINGS frame。</p><p>服务器创建新流，推送a.js。然后继续发送index.html和a.js的response header、response body。</p><p>浏览器收到<code>PUSH_PROMISE</code>帧，发现服务器要推送的内容已经在浏览器缓存里了，遂发送RST_STREAM拒绝推送。</p><p>服务器收到RST_STREAM后，不再推送a.js剩下的数据。</p><p>服务器因为一些原因想要关闭连接，发送GOAWAY帧。也可以由浏览器关闭，只要浏览器觉得之后不再有请求了。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>HTTP/2才刚刚正式发布不久，支持程度并没有那么好，以后应该有相当长的一段时间，HTTP/2要与HTTP/1.x共存。特别是，Win7快要成为下个XP的节奏，那么IE9就是下个IE6了。双协议部署上，可能会有不少麻烦之处。HTTP/1.x时代的很多优化，在HTTP/2是不必要的，也有冲突的，甚至是累赘。</p><p>比如子资源的位置，可以用HTTP/2优先级解决。</p><p>比如域名分区，在HTTP/2中本来可以用一个连接完成，却要用多个连接，这样就有性能损耗了。</p><p>比如合并、雪碧图，之前是为了减少请求，但在HTTP/2新起请求不费事，但拆分开来倒可以更好地利用浏览器缓存。还有类似的内联资源，可以用服务器推送，也同样可以更好地利用缓存。</p><p>更多具体的问题，需要在生产实践中得出了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如今，互联网上的内容越来越丰富，过去几年时间，一个页面产生请求和整个大小都一直增长，这个趋势还会一直保持，对页面性能优化也要马不停蹄。&lt;/p&gt;
&lt;p&gt;一个页面，会经历过加载资源，执行脚本，渲染界面的过程。我们知道，100ms对于计算机来说，可以干很多事情了，但是对于网络请求
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="http" scheme="http://dageger.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>快速理解JS中apply()和call()原理</title>
    <link href="http://dageger.cn/2017/12/20/fe-callapply/"/>
    <id>http://dageger.cn/2017/12/20/fe-callapply/</id>
    <published>2017-12-20T08:35:59.000Z</published>
    <updated>2018-06-15T08:30:08.129Z</updated>
    
    <content type="html"><![CDATA[<p>在了解<code>call()</code>和<code>apply()</code>原理之前，我们必须对<code>this</code>的作用和使用方法有所了解，如果你属性<code>this</code> 的用法，那么请直接往下看。</p><h3 id="call方法"><a href="#call方法" class="headerlink" title="call方法:"></a>call方法:</h3><p>语法：<code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code></p><p>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。 如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。</p><h3 id="apply方法："><a href="#apply方法：" class="headerlink" title="apply方法："></a>apply方法：</h3><p>语法：<code>apply([thisObj[,argArray]])</code></p><p>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。</p><p><code>call()</code>和<code>apply()</code>的作用十分相似，只是参数类型上的差别，以适应不同的使用场景。它们都是为了改变函数运行时的 context（上下文）而存在的，再说的直白一点，就是为了改变函数内部 this 的指向。</p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>我们有一句很经典的谚语，说的是：龙生龙，凤生凤，老鼠生来会打洞，这从遗传上解释是，动物的某些行为有可能是由一系列基因所调控的，但是，注意，我们偏偏想让龙来打洞呢，该如何去实现？下面将围绕这个话题来解释<code>call()</code>和<code>apply()</code>的原理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dragon = &#123;</div><div class="line">  name : <span class="string">'foo'</span></div><div class="line">  <span class="comment">// other attribute</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> mouse = &#123;</div><div class="line">  name : <span class="string">'tom'</span>,</div><div class="line">  makeHole : <span class="function"><span class="keyword">function</span>(<span class="params">where</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is making a hole in the '</span> + where)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// other attribute</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">mouse.makeHole.call(dragon,<span class="string">'hill'</span>)</div></pre></td></tr></table></figure><p>运行上面代码后会在控制台上打印出：</p><p><img src="http://img.blog.csdn.net/20171220150934229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRGFHZWdlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>可以看出，我们声明了一个<code>dragon</code>的对象，我们并没有赋予它<code>打洞</code>的功能，但是我们使用<code>call()</code>继承了<code>mouse</code>的方法，就可以做到<code>mouse</code>函数所能做到的事情。</p><p>这到底是怎么做到的呢？让我们来看看<code>call()</code>的参数：<br>第一个是一个对象，这个对象将代替<code>Function</code>类里原本的<code>this</code>对象，我们传入的是<code>this</code>，记住，这个<code>this</code>在<code>makeHole</code>函数里指的是未来将要实例化这个函数的对象（我知道这有些拗口），当声明了<code>dragon</code>的时候，这个<code>this</code>指的就是<code>dragon</code>。除了第一个参数，后面所有的参数都是传给父函数本身使用的参数。</p><p>而<code>apply()</code>和<code>call()</code>功能几乎一样，唯一的区别就是<code>apply()</code>第二个参数只能是数组，这个数组将作为参数传给原函数的参数列表<code>arguments</code>。</p><h3 id="模拟实现call-函数"><a href="#模拟实现call-函数" class="headerlink" title="模拟实现call()函数"></a>模拟实现call()函数</h3><p><code>call()</code>函数是什么样的原理呢？我们用一个实例来帮助理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建Dragon</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dragon</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个说话的函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">content</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' : '</span> + content)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//模拟原生call函数</span></div><div class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</div><div class="line">  context = context || <span class="built_in">window</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> args = [];</div><div class="line">  context.fn = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">    args.push(<span class="built_in">arguments</span>[i]);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  context.fn(...args);</div><div class="line">  <span class="keyword">delete</span> context.fn;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//实例化一个名字为'foo'的龙</span></div><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Dragon(<span class="string">'foo'</span>)</div><div class="line"></div><div class="line"><span class="comment">//让foo说话</span></div><div class="line">say.myCall(foo, <span class="string">'I can talk!'</span>)</div></pre></td></tr></table></figure><p>上面的代码很容易理解，唯一的困难点在于理解在原型链上的<code>myCall</code>函数<br>我们来分析实现的步骤：</p><ol><li>做一个多场景适配，当<code>myCall</code>函数没有接收到参数时，<code>context</code>对应的是<code>window</code>对象</li><li>创建一个空数组，用于接收形参。</li><li>绑定<code>this</code>，这里的<code>this</code>代表的就是上下文中的<code>say</code>函数。</li><li><code>for</code>循环将参数添加到<code>args</code>数组，循环从1开始是因为第0位是<code>foo</code>对象，并非我们需要的参数</li><li>执行函数，并将<code>args</code>数组作为rest参数传入，这里是ES6的写法，不熟悉的同学参见阮一峰老师的<a href="http://es6.ruanyifeng.com/#docs/function#rest-%E5%8F%82%E6%95%B0" target="_blank" rel="external">rest 参数</a>文档</li><li>删除函数</li></ol><p>打印结果为：<br><img src="http://img.blog.csdn.net/20171220161501558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRGFHZWdlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>可以看到，这里我们实现了让一个叫做<code>foo</code>的龙说话！<br><strong><em><code>apply()</code>函数实现方式同样类似，可以修改上述例子实现，主要是在参数一部分做处理。</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在了解&lt;code&gt;call()&lt;/code&gt;和&lt;code&gt;apply()&lt;/code&gt;原理之前，我们必须对&lt;code&gt;this&lt;/code&gt;的作用和使用方法有所了解，如果你属性&lt;code&gt;this&lt;/code&gt; 的用法，那么请直接往下看。&lt;/p&gt;
&lt;h3 id=&quot;call方
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://dageger.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Django CMS教程</title>
    <link href="http://dageger.cn/2017/12/20/be-django-cms-install/"/>
    <id>http://dageger.cn/2017/12/20/be-django-cms-install/</id>
    <published>2017-12-20T03:53:38.000Z</published>
    <updated>2018-06-19T07:56:41.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>最近我在公司里负责官网后台升级工作，因为之前网站是单纯的静态页面，在升级时需要满足每个页面的内容都可以在后台替换，为此我寻找了很多关于django的CMS工具，像FeinCMS、Mezzanine和Django-cms，综合比较后，我发现Django-cms更符合我的需求。 首先它集成的placeholder完美的解决了页面内容替换的需求，即所见即所得(WYSIWYG)，还有像Page管理、可扩展的菜单系统、基于plugin的扩展机制等功能，其次它的用户使用量较高，文档说明详细，界面美观、显著改善了Django原因的后台界面美观。 但是Django-cms并不是一个开箱即用的产品，在网上根本找不到模板或者主题，官方文档也是英文所写，对于新手快速上手有一定困难度，本教程是总结开发时候的经验，提供一个平滑的学习教程，以后也会不断更新。</p><h3 id="安装-django-CMS"><a href="#安装-django-CMS" class="headerlink" title="安装 django CMS"></a>安装 django CMS</h3><p>我们将从安装虚拟环境开始</p><h4 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h4><p>django CMS 需要使用Django 1.8, 1.9, 1.10 和 Python 2.7， 3.3 或者3.4</p><h4 id="创建和激活虚拟环境"><a href="#创建和激活虚拟环境" class="headerlink" title="创建和激活虚拟环境"></a>创建和激活虚拟环境</h4><p>我们假设你已经安装<code>virtualenv</code>,并且你了解最基本的使用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv env</div><div class="line">source env/bin/activate</div></pre></td></tr></table></figure></p><p>如果你使用Windows系统，你需要这样激活环境<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">env\Scripts\activate</div></pre></td></tr></table></figure></p><h4 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h4><p><code>pip</code> 是Python的安装器，保证你安装的是最新的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure><h4 id="使用django-CMS安装器"><a href="#使用django-CMS安装器" class="headerlink" title="使用django CMS安装器"></a>使用django CMS安装器</h4><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install djangocms-installer</div></pre></td></tr></table></figure><p>它提供一个新的命令，<code>djangocms</code></p><p>创建一个新的工作目录，然后进入这个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir tutorial-project</div><div class="line">cd tutorial-project</div></pre></td></tr></table></figure><p>创建一个Django项目，命名为<code>mysite</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">djangocms -f -p . mysite</div></pre></td></tr></table></figure></p><p>上面命令意味着：</p><ul><li>运行django CMS安装器</li><li><code>-f</code> 安装Django Filer <strong>本教程需要</strong></li><li><code>-p</code> 使用当前目录作为新项目目录的父目录</li><li><code>mysite</code> 新项目的名称</li></ul><blockquote><p>注意：如果当前目录不是空目录，需要添加<code>-s</code>,但是可能会覆盖已有文件</p></blockquote><p>安装后setting.py 会配置一些默认参数，建议你根据实际情况来修改参数。</p><p>安装器默认会创建一个管理账户，用户名<code>admin</code>，密码<code>admin</code></p><h4 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div></pre></td></tr></table></figure><p>在浏览器打开<code>http://localhost:8000/</code>，你将会看到的Django CMS登录页面<br><img src="http://img.blog.csdn.net/20171220114031412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRGFHZWdlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>恭喜你！已经成功安装一个功能完整的django CMS！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;最近我在公司里负责官网后台升级工作，因为之前网站是单纯的静态页面，在升级时需要满足每个页面的内容都可以在后台替换，为此我寻找了很多关
      
    
    </summary>
    
      <category term="后端" scheme="http://dageger.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Django" scheme="http://dageger.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Vue中better-scroll插件的使用</title>
    <link href="http://dageger.cn/2017/12/17/fe-better-scroll/"/>
    <id>http://dageger.cn/2017/12/17/fe-better-scroll/</id>
    <published>2017-12-17T06:01:16.000Z</published>
    <updated>2018-06-15T08:56:37.572Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现原理：父容器固定高度，并设置属性overflow-hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父容器上。"><a href="#实现原理：父容器固定高度，并设置属性overflow-hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父容器上。" class="headerlink" title="实现原理：父容器固定高度，并设置属性overflow: hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父容器上。"></a>实现原理：父容器固定高度，并设置属性overflow: hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父容器上。</h4><ol><li>npm安装better-scroll插件。npm install–save better-scroll</li><li>在文件中引入better-scroll。import BScroll from ‘better-scroll’;</li></ol><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p>new BScroll(Dom对象,{//opsitons});<br>在Vue中要获得Dom对象，需设置标签属性‘v-el’。<br>例如：<div v-el:betterscroll=""></div><br>获取dom对象，this.$els.betterscroll<br>为了让子元素能被点击，需设置click:true.并可接受此点击事件@click=”info($index,$event)”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将scroll复制给当前对象的变量betterscroll</span></div><div class="line"><span class="keyword">this</span>.betterscroll=<span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$els.betterscroll,&#123;</div><div class="line">  <span class="comment">//点击事件许可</span></div><div class="line">  click:<span class="literal">true</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>注意：Vue中数据更新是异步的，在数据还没有加载完之前，BScroll是无法获取目标内容容器的高度的，就会出现无法滚动的现象。<br>这里可以用<code>$nextTick()</code>解决。<br>vue官方是这样说明的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改数据</span></div><div class="line">vm.msg=<span class="string">'hello'</span></div><div class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//DOM更新了  </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>nextTick应该被用在某些计算属性或者watch再或者某个按钮click事件绑定的methods当中。这时，nextTick才能保证你的数据更新完成之后再执行你绑定的函数。<br>实例用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">  <span class="keyword">this</span>.initscroll();</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>注意：在PC上，点击事件会执行两次。由于better-scroll派发的事件有event_constructed:true属性。可以进行处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">info(index,event)&#123;</div><div class="line">  <span class="keyword">if</span> (!event.event_constructed) &#123;</div><div class="line">    <span class="keyword">return</span>;    </div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(index,event,timeStamp);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现原理：父容器固定高度，并设置属性overflow-hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父容器上。&quot;&gt;&lt;a href=&quot;#实现原理：父容器固定高度，并设置属性overflow-hidden，使得子元素高度超出容器后能被
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://dageger.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>跨域以及一些解决方法</title>
    <link href="http://dageger.cn/2017/12/01/fe-backend-jsonp/"/>
    <id>http://dageger.cn/2017/12/01/fe-backend-jsonp/</id>
    <published>2017-12-01T12:48:54.000Z</published>
    <updated>2018-06-19T07:56:58.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>最近在回顾一些知识，归纳一下以前的笔记再结合各个资料说一下我对跨域和跨域问题的解决方法。<br>产生跨域安全问题不是后台服务器不允许前台调用，<br>其本质是浏览器的同源策略(Same-origin policy)造成的，它是浏览器最基本和最核心的安全机制，同源是指URI scheme、host name、port number相同，借用一下网上的栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">http://www.bear.cn/index.html 调用   http://www.bear.cn/server.php  非跨域</div><div class="line"></div><div class="line">http://www.bear.cn/index.html 调用   http://www.jasmine .cn/server.php  跨域,主域不同</div><div class="line"></div><div class="line">http://gogo.bear.cn/index.html 调用   http://ge.jasmine.cn/server.php  跨域,子域名不同</div><div class="line"></div><div class="line">http://www.bear.cn:2018/index.html 调用   http://www.bear.cn/server.php  跨域,端口不同</div><div class="line"></div><div class="line">https://www.bear.cn/index.html 调用   http://www.bear.cn/server.php  跨域,协议不同</div></pre></td></tr></table></figure><p>如果非同源，将会受到如下限制：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取。</li><li>DOM 无法获得。</li><li>AJAX 请求不能发送。</li></ul><p>浏览器发现前台代码发出了一个非本域的请求，出于安全的考虑，浏览器会做一些校验，如果校验不通过，就无法完成这个请求，抛出请求跨域的错误</p><p><img src="./1.jpg" alt=""></p><h1 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h1><p>JSONP是JSON with padding（填充式JSON或参数式JSON）的简写，是应用JSON的一种办法，JSONP看起来和JSON差不多，只不过是被包含在函数调用中的JSON，就像这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">callback(&#123;<span class="string">"name"</span>: <span class="string">"Nicholas Bear"</span>&#125;)</div></pre></td></tr></table></figure><p>JSONP由两部分组成：回调函数和数据。回调函数是当浏览器接收到响应时调用的函数，回电函数名一般在请求中指定，数据就是回调函数的参数。如下就是典型的JSONP请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://somewhere-else/json/?callback=handleResponse</div></pre></td></tr></table></figure><p>这里指定的回调函数就是<code>handleResponse()</code><br>JSONP实现原理是通过JS脚本动态生成一个script元素，为其src属性指定一个跨域URL，这里的script元素和img、link元素类似，都有能力不受限制地从其他域加载资源。它并不是官方的协议，而是一种hack手段，看一个简单的栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">    alert(<span class="string">"got message"</span>, res);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>),</div><div class="line">    body = <span class="built_in">document</span>.body;</div><div class="line">script.src = <span class="string">"http://somewhere-else/json/?callback=handleResponse"</span>;</div><div class="line">body.insertBefore(script, body.firstChild);</div></pre></td></tr></table></figure><p>JSONP实现跨域访问非常方便，简单易用，但是也有不足的地方：</p><p>首先，从它的实现方式可以看出来，它是发起一个资源获取请求，是<code>GET</code>类型的，在日常开发中常用的请求类型还有<code>POST</code>，<code>PUT</code>，<code>DELETE</code>，而<code>JSONP</code>只能发起<code>GET</code>请求，是它的一大短板。</p><p>其次，JSONP是从其他域中加载代码并执行，如果其他域不安全，很有可能会在执行的代码中夹杂一些恶意代码，所以在使用JSONP时一定要保证被请求方它安全可靠。</p><p>另外，JSON和JSONP还有一个区别需要特别注意，JSONP请求返回来的不是JSON数据，而是一个JavaScript脚本，为了实现JSONP跨域，需要后台服务器配合。</p><p>最后，由于它的请求类型并不是XHR，就缺少了一些事件处理程序，要追踪JSONP请求是否失败并不容易，或者为JSONP请求增加定时器，超时就视为请求失败，接下来就再次发送请求或者做其他事情，但是每个用户的网络状况并不能保证，这样做也不是万全之策。</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>CORS(Cross-origin resource sharing)跨域源资源共享，是W3C的一个工作草案， 定义了在跨域访问时，浏览器与服务器的沟通方式，具体实现为，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定跨域请求或响应时应该成功，还是应该失败。</p><p>比如说发起一个GET跨域请求，Content-type是text/plain,在发送跨域请求前，浏览器会为http头部加上一个额外的Origin头部，其中包含了页面的源信息(协议、域名和端口号)，这个额外的Origin决定了服务器是否响应该请求。一个Origin头部实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Origin: https://www.somewhere-else.net</div></pre></td></tr></table></figure><p>如果服务器认可该请求就会在响应头加上<code>Access-Control-Allow-Origin</code>标志字段,值可以是与请求头带来的Origin相同，如果该服务器上的是公共资源，值就是“*”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: https://www.somewhere-else.net</div></pre></td></tr></table></figure><p>如果响应头中没有这个这个字段，说明服务器拒绝了这次跨域请求，会抛出一个错误，但是并不能被xhr的<code>onerror</code>事件捕获。默认情况下跨域请求都是不带凭证的（<code>cookie</code>，<code>HTTP</code>认证及服务端SSL证明等），通过修改xhr对象的<code>withCredentials</code>(IE10以前的版本不支持该属性)设置为true，可以指定某个请求携带凭证。如果服务器允许跨域请求携带凭证响应头部会有标示。<br><code>Access-Control-Allow-Credentials: true</code><br>  如果发送的是带凭证的请求，响应头里却没有这个字段，那么浏览器就不会吧响应交给JS，意思是xhr获取到的<code>responseText</code>为空，status为0，这个时候<code>onerror</code>可以捕获到该错误.<br>XHR对象在跨域时也是有限制的:</p><p>不能使用<code>setRequestHeader()</code>来设置头部<br>默认情况下无法发送<code>cookie</code><br>调用<code>getAllResponseHeaders()</code>方法总会返回空字符串</p><h1 id="CORS的实现"><a href="#CORS的实现" class="headerlink" title="CORS的实现:"></a>CORS的实现:</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onreadystateChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;= <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">            alert(xhr.responseText);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"error "</span>, xhr.status);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"http://www.somewhere-else.com/page"</span>, <span class="literal">true</span>);</div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure><p>发送CORS请求和发送普通的xhr对象差别不大, 只需要在地址处写绝对地址即可.跨域所需要做的工作就交给浏览器,对于用户来说是透明.</p><p>IE浏览器是用XDR(XDomainRequest)来实现CORS的,它和XHR相似,但是能提供能安全可靠的跨域通信:</p><p>cookie不会随请求发送,也不会随响应返回<br>只能设置请求头部信息中的<code>Content-Type</code>字段<br>不能访问响应头部信息<br>只支持GET和POST请求</p><p>XDR对象和xhr的使用方法类型,也是创造一个<code>XDomainRequest</code>的实例,调用<code>open()</code>方法,再调用<code>send()</code>方法,但是与xhr对象的<code>open()</code>不同,XDR对象的<code>open()</code>方法只接受两个参数:请求的类型和URL,XDR发送的请求都是异步执行的。而且XDR对象无法访问<code>status</code>属性，所以在使用XDR时一定得通过<code>onerror</code>事件处理程序来捕获错误.</p><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><p>跨域请求在发送前,浏览器会检查这个请求是不是简单请求,简单请求满足下面两个条件:</p><ul><li>请求方式为<code>HEAD</code>,<code>POST</code>,<code>GET</code></li><li><p><code>HTTP</code>头部信息包括但不超过以下字段</p><ul><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type(application/x-www-form-urlencode,multipart/form-data,text/plain)</li></ul></li></ul><p>如果满足这些条件，浏览器就会在请求头部增加额外的Origin字段后发送跨域请求。<br><br>响应头一般包含这些字段：</p><ul><li>Access-Control-Allow-Origin，如果浏览器校验通过，这个字段显示的是请求头的Origin值或者*</li><li>Access-Control-Allow-Credential，值为布尔型，表示请求头是否可以携带cookie</li><li>Access-Control-Expose-Headers。拓展的头部信息，浏览器将CORS响应交给JS后，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</li></ul><p>注意，如果你想在请求中携带凭证，上面已经说过了，必须将xhr的withCrediential属性设置为true，但有时会报错，错误信息如下图：<br><img src="./2.jpg" alt=""></p><p>错误提示里说如果想要在请求头中携带凭证，那么响应头中的<code>Access-Control-Allow-Origin</code>必须和请求头中的Origin一致，而不能是“*”，解决方法很简单，修改一下后端代码就可以了。</p><h1 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h1><p>CORS通过一种叫做<code>Preflighted Requestes</code>预请求的透明服务器验证机制支持开发人员使用自定义的头部，GET和POST之外的方法，以及不同类型的主题内容。也就是说想要发送这种非简单的跨域请求以前会先发送一个询问请求（携带非简单请求部分信息）来询问服务器是否同意这次非简单请求，这种询问请求使用OPTIONS方法，发送以下头部：</p><ul><li>Origin：和简单请求相同</li><li>Access-Control-Request-Method：请求自身使用的方法</li><li>Access-Control-Request-Headers：这是一个可选头部字段，多个头部以逗号分开。</li></ul><p>发送这个请求以后，服务器可以决定是否允许这种类型的请求。服务器可以通过在响应头中携带以下头部与浏览器沟通：</p><ul><li>Access-Control-Allow-Origin：和简单请求相同</li><li>Access-Control-Allow-Methods：允许的方法</li><li>Access-Control-Allow-Headers: 允许的头部</li><li>Access-Control-Max-Age: 预请求的有效期或者缓存存活时间(秒)</li></ul><p>比如说我现在发送了一个自定义头部字段<code>f-headers1</code>和<code>f-headers2</code>,方法为post的非简单请求,那么首先发送的预请求头部会包含以下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Origin: http://www.yourhostname.com</div><div class="line">Access-Control-Request-Method: POST</div><div class="line">Access-Control-Request-Headers: f-headers1, f-headers2</div></pre></td></tr></table></figure><p>如果服务器允许这样的非简单请求的跨域访问,返回的响应头会包含这些字段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http://www.yourhostname.com</div><div class="line">Access-Control-Allow-Method: POST,GET,PUT,DELETE</div><div class="line">Access-Control-Allow-Headers: f-headers1, f-headers2</div><div class="line">Access-Control-Max-Age: 3600</div></pre></td></tr></table></figure><p>预请求结束后,结果将按照响应中指定的时间缓存起来,下次再发送这样的非简单请求之前就不会再发送询问请求.</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>上述几条都是解决跨域请求资源，但是如果想要获取非同源的<code>cookie</code>，<code>LocalStorage</code>或<code>IndexDB</code>怎么办。<code>cookie</code>是服务器在浏览器上写下的一小段认证信息，大小一般是4k，根据浏览器的不同，每个域允许种下的cookie数量也不同。<code>cookie</code>只有在同源的域下才能共享，但是我们可以通过修改<code>document.domain</code>来共享<code>cookie</code>，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.abc.com</span></div><div class="line"><span class="built_in">document</span>.domain = <span class="string">"abc.com"</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"name=bingo"</span>;</div><div class="line"><span class="comment">// b.abc.com</span></div><div class="line"><span class="built_in">document</span>.domain = <span class="string">"abc.com"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie); <span class="comment">// "name=bingo"</span></div></pre></td></tr></table></figure><p>但是这种方法前提是这两个网页一级域名相同，一级域名或者叫根域名相同是什么意思呢，比如说这里有个两个域名<code>www.abc.com</code>和<code>www.f.abc.com</code>它们的一级域名都是<code>abc.com</code>。二级域名就是增加了一级包括<code>www</code>，比如说<code>www.zdt.com</code>,<code>netgo.ccdn.com</code>,<code>www.baidu.com</code>等等.三级,四级域名同理.<br>而且这种方法只适用于<code>cookie</code>和<code>iframe</code>.无法获取<code>locastorage</code>和<code>IndexDB</code>.</p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>利用iframe解决跨域问题也是一种可取的办法.光是给iframe增加src获取其他页面的资源是不现实,必须借助一些特性实现hack手段.</p><h1 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h1><p>两个iframe之间或者父窗口和子窗口之间。如上述例子里通过改变相同主域的<code>document.domain</code>可以跨域获取cookie，也可以获取对方的全局变量。这种方法和跨域获取cookie一样，只适合具有相同主域的跨域访问。实现原理为相同主域的网站设置相同的<code>document.domain</code>,浏览器就任务它们是同源的,这种方式比较简单，但也有安全问题，如果某一个网站被攻击后，另一个网站就会有安全漏洞</p><h1 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h1><p>window.name,它具有更新了页面的location更新后，值依然不会更变的神奇特性,这让我们跨域访问信息提供了机会。在一个页面中创建一个不同域的iframe，这个iframe的js代码修改它window.name的值，然后再将它变为和父窗口同域的iframe，在父窗口中就可以通过iframe获得修改过后的window.name的值</p><h1 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h1><p><code>location.hash</code>又称片段标识符(Fragment Identitier),它是URL字符中#后面的部分,比如<code>http://www.somewhere-else.com/a.html#fragment</code>,这里的片段标识符就是fragment,URL中的片段标识符改变并不会引起页面刷新.利用<code>location.hash</code>实现跨域访问信息的原理是父窗口可以读写子窗口的URL,子窗口只能读写相同域父窗口的URL.这里想要实现跨域,不同域的子窗口就必须借助一个与父窗口同域的代理. 举个栗子<br><code>a.abc.com/index.html</code>(a)下有一个src为<code>smg.com/index.html</code>(b)的iframe.</p><ol><li><p>a页面给b页面发送数据</p><ul><li>a修改b的src为smg.com/index.html#data</li><li>b页面访问自己的location.hash即可拿到数据</li></ul></li><li><p>b页面给a页面发送数据,b由于不能修改不同域父窗口的URL,所以b页面需要动态创建一个和父窗口同域的iframe来做代理.</p><ul><li>b页面创建一个src为a.abc.com/proxy.html#data的子窗口</li><li>这个proxy页面通过onhashchange(兼容情况)事件监听自己href的变化,事件触发后通过修改a页面的hash来达到传递数据的功能</li><li>a页面访问自己的location.hash即可拿到数据</li></ul></li></ol><h1 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h1><p>不管是iframe和location.hash、document.domain还是window.name都是属于非官方的跨越方法，下面要介绍的就是一个官方方法—postMessage,它是HTML5新增的一个跨文档通信API，它实现了即使不同域也可以跨窗口直接通信的功能，而且只要使用得当，这种方法就很安全。<br>调用对象为父窗口或者的window对象、window.open()的返回值或者是iframe的contentWindow这个属性，这个方法接受两个参数，第一个是要发送的消息，第二个参数是指定接受消息的接收源，可以是*表示所有窗口都可以接收到消息或者是一个url，但只有在协议，域名和端口号都相同才会接收到消息。<br>添加以下代码即可接收<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessage, <span class="literal">false</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="comment">// For Chrome, the origin property is in the event.originalEvent</span></div><div class="line">  <span class="comment">// object.</span></div><div class="line">  <span class="keyword">var</span> origin = event.origin || event.originalEvent.origin;</div><div class="line">  <span class="keyword">if</span> (origin !== <span class="string">"http://example.org:8080"</span>)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>事件event对象有三个属性</p><ul><li>data,发送过来的信息</li><li>origin,发送发窗口的origin</li><li>source,对发送消息的窗口对象的引用; 您可以使用此来在具有不同origin的两个窗口之间建立双向通信</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h1&gt;&lt;p&gt;最近在回顾一些知识，归纳一下以前的笔记再结合各个资料说一下我对跨域和跨域问题的解决方法。&lt;br&gt;产生跨域安全问题不是后台服务器不允许前台调用
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://dageger.cn/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>this经典题目</title>
    <link href="http://dageger.cn/2017/11/10/fe-this/"/>
    <id>http://dageger.cn/2017/11/10/fe-this/</id>
    <published>2017-11-10T02:37:13.000Z</published>
    <updated>2018-06-19T07:11:01.695Z</updated>
    
    <content type="html"><![CDATA[<p>经典题目，在javascript中，<code>this</code>是如何工作的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fullname = <span class="string">'John Doe'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">   fullname: <span class="string">'Colin Ihrig'</span>,</div><div class="line">   prop: &#123;</div><div class="line">      fullname: <span class="string">'Aurelio De Rosa'</span>,</div><div class="line">      getFullname: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.fullname;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.prop.getFullname());</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = obj.prop.getFullname;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(test());</div></pre></td></tr></table></figure><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>这段代码打印结果是：<code>Aurelio De Rosa</code> 和 <code>John Doe</code> 。原因是，<code>JavaScript</code>中关键字<code>this</code>所引用的是函数上下文，取决于函数是如何调用的，而不是怎么被定义的。</p><p>在第一个<code>console.log()</code>，<code>getFullname()</code>是作为<code>obj.prop</code>对象的函数被调用。因此，当前的上下文指代后者，并且函数返回这个对象的<code>fullname</code>属性。相反，当<code>getFullname()</code>被赋值给<code>test</code>变量时，当前的上下文是全局对象<code>window</code>，这是因为<code>test</code>被隐式地作为全局对象的属性。基于这一点，函数返回<code>window</code>的<code>fullname</code>，在本例中即为第一行代码设置的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经典题目，在javascript中，&lt;code&gt;this&lt;/code&gt;是如何工作的&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>真的知道什么是程序员吗</title>
    <link href="http://dageger.cn/2017/11/03/fe-progromer/"/>
    <id>http://dageger.cn/2017/11/03/fe-progromer/</id>
    <published>2017-11-03T09:44:21.000Z</published>
    <updated>2018-06-19T07:13:49.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每年都有无数年轻程序员，加入软件行业。 他们在学校里学过编程，但是对这个行业的现实一无所知。<br><a href="http://www.kalzumeus.com/" target="_blank" rel="external">Patrick McKenzie</a>是美国一家小软件公司的老板，他写了一篇长文，介绍这个行业的一些实际情况。我看了以后很感慨，有些地方很受启发,</p><p> <a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/" target="_blank" rel="external">原文地址</a></p></blockquote><h1 id="Don’t-Call-Yourself-A-Programmer-And-Other-Career-Advice"><a href="#Don’t-Call-Yourself-A-Programmer-And-Other-Career-Advice" class="headerlink" title="Don’t Call Yourself A Programmer, And Other Career Advice"></a>Don’t Call Yourself A Programmer, And Other Career Advice</h1><p>If there was one course I could add to every engineering education, it wouldn’t involve compilers or gates or time complexity.  It would be Realities Of Your Industry 101, because we don’t teach them and this results in lots of unnecessary pain and suffering.  This post aspires to be README.txt for your career as a young engineer.  The goal is to make you happy, by filling in the gaps in your education regarding how the “real world” actually works.  It took me about ten years and a lot of suffering to figure out some of this, starting from “fairly bright engineer with low self-confidence and zero practical knowledge of business.”  I wouldn’t trust this as the definitive guide, but hopefully it will provide value over what your college Career Center isn’t telling you.</p><h2 id="90-of-programming-jobs-are-in-creating-Line-of-Business-software"><a href="#90-of-programming-jobs-are-in-creating-Line-of-Business-software" class="headerlink" title="90% of programming jobs are in creating Line of Business software"></a>90% of programming jobs are in creating Line of Business software</h2><p>Economics 101: the price for anything (including you) is a function of the supply of it and demand for it.  Let’s talk about the demand side first.  Most software is not sold in boxes, available on the Internet, or downloaded from the App Store.  Most software is boring one-off applications in corporations, under-girding every imaginable facet of the global economy.  It tracks expenses, it optimizes shipping costs, it assists the accounting department in preparing projections, it helps design new widgets, it prices insurance policies, it flags orders for manual review by the fraud department, etc etc.  Software solves business problems.  Software often solves business problems despite being soul-crushingly boring and of minimal technical complexity.  For example, consider an internal travel expense reporting form.  Across a company with 2,000 employees, that might save 5,000 man-hours a year (at an average fully-loaded cost of $50 an hour) versus handling expenses on paper, for a savings of $250,000 a year.  It does not matter to the company that the reporting form is the world’s simplest CRUD app, it only matters that it either saves the company costs or generates additional revenue.<br><br><br>There are companies which create software which actually gets used by customers, which describes almost everything that you probably think of when you think of software.  It is unlikely that you will work at one unless you work towards making this happen.  Even if you actually work at one, many of the programmers there do not work on customer-facing software, either.</p><h2 id="Engineers-are-hired-to-create-business-value-not-to-program-things"><a href="#Engineers-are-hired-to-create-business-value-not-to-program-things" class="headerlink" title="Engineers are hired to create business value, not to program things"></a>Engineers are hired to create business value, not to program things</h2><p>Businesses do things for irrational and political reasons all the time (see below), but in the main they converge on doing things which increase revenue or reduce costs.  Status in well-run businesses generally is awarded to people who successfully take credit for doing one of these things.  (That can, but does not necessarily, entail actually doing them.)  The person who has decided to bring on one more engineer is not doing it because they love having a geek around the room, they are doing it because adding the geek allows them to complete a project (or projects) which will add revenue or decrease costs.  Producing beautiful software is not a goal.  Solving complex technical problems is not a goal.  Writing bug-free code is not a goal.  Using sexy programming languages is not a goal.  Add revenue.  Reduce costs.  Those are your only goals.<br><br><br>Peter Drucker — you haven’t heard of him, but he is a prophet among people who sign checks — came up with the terms Profit Center and Cost Center.  Profit Centers are the part of an organization that bring in the bacon: partners at law firms, sales at enterprise software companies, “masters of the universe” on Wall Street, etc etc.  Cost Centers are, well, everybody else.  You really want to be attached to Profit Centers because it will bring you higher wages, more respect, and greater opportunities for everything of value to you.  It isn’t hard: a bright high schooler, given a paragraph-long description of a business, can usually identify where the Profit Center is.  If you want to work there, work for that.  If you can’t, either a) work elsewhere or b) engineer your transfer after joining the company.<br><br><br>Engineers in particular are usually very highly paid Cost Centers, which sets MBA’s optimization antennae to twitching.  This is what brings us wonderful ideas like outsourcing, which is “Let’s replace really expensive Cost Centers who do some magic which we kinda need but don’t really care about with less expensive Cost Centers in a lower wage country”.  (Quick sidenote: You can absolutely ignore outsourcing as a career threat if you read the rest of this guide.)  Nobody ever outsources Profit Centers.  Attempting to do so would be the setup for MBA humor.  It’s like suggesting replacing your source control system with a bunch of copies maintained on floppy disks.</p><h2 id="Don’t-call-yourself-a-programmer"><a href="#Don’t-call-yourself-a-programmer" class="headerlink" title="Don’t call yourself a programmer"></a>Don’t call yourself a programmer</h2><p>“Programmer” sounds like “anomalously high-cost peon who types some mumbo-jumbo into some other mumbo-jumbo.”  If you call yourself a programmer, someone is already working on a way to get you fired.  You know Salesforce, widely perceived among engineers to be a Software as a Services company?  Their motto and sales point is “No Software”, which conveys to their actual customers “You know those programmers you have working on your internal systems?  If you used Salesforce, you could fire half of them and pocket part of the difference in your bonus.”  (There’s nothing wrong with this, by the way.  You’re in the business of unemploying people.  If you think that is unfair, go back to school and study something that doesn’t matter.)</p><p><br><br>Instead, describe yourself by what you have accomplished for previously employers vis-a-vis increasing revenues or reducing costs.  If you have not had the opportunity to do this yet, describe things which suggest you have the ability to increase revenue or reduce costs, or ideas to do so.<br><br><br>There are many varieties of well-paid professionals who sling code but do not describe themselves as slinging code for a living.  Quants on Wall Street are the first and best-known example: they use computers and math as a lever to make high-consequence decisions better and faster than an unaided human could, and the punchline to those decisions is “our firm make billions of dollars.”  Successful quants make more in bonuses in a good year than many equivalently talented engineers will earn in a decade or lifetime.<br><br><br>Similarly, even though you might think Google sounds like a programmer-friendly company, there are programmers and then there’s the people who are closely tied to 1% improvements in AdWords click-through rates.  (Hint: provably worth billions of dollars.)  I recently stumbled across a web-page from the guy whose professional bio is “wrote the backend billing code that 97% of Google’s revenue passes through.”  He’s now an angel investor (a polite synonym for “rich”).</p><h2 id="You-are-not-defined-by-your-chosen-software-stack"><a href="#You-are-not-defined-by-your-chosen-software-stack" class="headerlink" title="You are not defined by your chosen software stack"></a>You are not defined by your chosen software stack</h2><p>I recently asked via Twitter what young engineers wanted to know about careers.  Many asked how to know what programming language or stack to study.  It doesn’t matter.  There you go.<br><br><br>Do Java programmers make more money than .NET programmers?  Anyone describing themselves as either a Java programmer or .NET programmer has already lost, because a) they’re a programmer (you’re not, see above) and b) they’re making themselves non-hireable for most programming jobs.  In the real world, picking up a new language takes a few weeks of effort and after 6 to 12 months nobody will ever notice you haven’t been doing that one for your entire career.  I did back-end Big Freaking Java Web Application development as recently as March 2010.  Trust me, nobody cares about that.  If a Python shop was looking for somebody technical to make them a pile of money, the fact that I’ve never written a line of Python would not get held against me.<br><br><br>Talented engineers are rare — vastly rarer than opportunities to use them — and it is a seller’s market for talent right now in almost every facet of the field.  Everybody at Matasano uses Ruby.  If you don’t, but are a good engineer, they’ll hire you anyway.  (A good engineer has a track record of — repeat after me — increasing revenue or decreasing costs.)  Much of Fog Creek uses the Microsoft Stack.  I can’t even spell ASP.NET and they’d still hire me.<br><br><br>There are companies with broken HR policies where lack of a buzzword means you won’t be selected.  You don’t want to work for them, but if you really do, you can add the relevant buzzword to your resume for the costs of a few nights and weekends, or by controlling technology choices at your current job in such a manner that in advances your career interests.  Want to get trained on Ruby at a .NET shop?  Implement a one-off project in Ruby.  Bam, you are now a professional Ruby programmer — you coded Ruby and you took money for it.  (You laugh?  I did this at a Java shop.  The one-off Ruby project made the company $30,000.  My boss was, predictably, quite happy and never even asked what produced the deliverable.)</p><h2 id="Co-workers-and-bosses-are-not-usually-your-friends"><a href="#Co-workers-and-bosses-are-not-usually-your-friends" class="headerlink" title="Co-workers and bosses are not usually your friends"></a>Co-workers and bosses are not usually your friends</h2><p>You will spend a lot of time with co-workers.  You may eventually become close friends with some of them, but in general, you will move on in three years and aside from maintaining cordial relations you will not go out of your way to invite them over to dinner.  They will treat you in exactly the same way.  You should be a good person to everyone you meet — it is the moral thing to do, and as a sidenote will really help your networking — but do not be under the delusion that everyone is your friend.<br><br><br>For example, at a job interview, even if you are talking to an affable 28 year old who feels like a slightly older version of you he is in a transaction.  You are not his friend, you are an input for an industrial process which he is trying to buy for the company at the lowest price.  That banter about World of Warcraft is just establishing a professional rapport, but he will (perfectly ethically) attempt to do things that none of your actual friends would ever do, like try to talk you down several thousand dollars in salary or guilt-trip you into spending more time with the company when you could be spending time with your actual friends.  You will have other coworkers who — affably and ethically — will suggest things which go against your interests, from “I should get credit for that project you just did” (probably not phrased in so many words) to “We should do this thing which advances my professional growth goals rather than yours.”  Don’t be surprised when this happens.</p><p><br></p><h2 id="You-radically-overestimate-the-average-skill-of-the-competition-because-of-the-crowd-you-hang-around-with"><a href="#You-radically-overestimate-the-average-skill-of-the-competition-because-of-the-crowd-you-hang-around-with" class="headerlink" title="You radically overestimate the average skill of the competition because of the crowd you hang around with"></a>You radically overestimate the average skill of the competition because of the crowd you hang around with</h2><p>Many people already successfully employed as senior engineers cannot actually implement FizzBuzz.  Just read it and weep.  Key takeaway: you probably are good enough to work at that company you think you’re not good enough for.  They hire better mortals, but they still hire mortals.</p><h2 id="“Read-ad-Send-in-resume-Go-to-job-interview-Receive-offer-”-is-the-exception-not-the-typical-case-for-getting-employment"><a href="#“Read-ad-Send-in-resume-Go-to-job-interview-Receive-offer-”-is-the-exception-not-the-typical-case-for-getting-employment" class="headerlink" title="“Read ad.  Send in resume.  Go to job interview.  Receive offer.” is the exception, not the typical case, for getting employment"></a>“Read ad.  Send in resume.  Go to job interview.  Receive offer.” is the exception, not the typical case, for getting employment</h2><p>Most jobs are never available publicly, just like most worthwhile candidates are not available publicly (see here).  Information about the position travels at approximately the speed of beer, sometimes lubricated by email.  The decisionmaker at a company knows he needs someone.  He tells his friends and business contacts.  One of them knows someone — family, a roommate from college, someone they met at a conference, an ex-colleague, whatever.  Introductions are made, a meeting happens, and they achieve agreement in principle on the job offer.  Then the resume/HR department/formal offer dance comes about.</p><p><br><br>This is disproportionately true of jobs you actually want to get.  “First employee at a successful startup” has a certain cachet for a lot of geeks, and virtually none of those got placed by sending in a cover letter to an HR department, in part because two-man startups don’t have enough scar tissue to form HR departments yet.  (P.S. You probably don’t want to be first employee for a startup.  Be the last co-founder instead.)  Want to get a job at Google?  They have a formal process for giving you a leg up because a Googler likes you.  (They also have multiple informal ways for a Googler who likes you an awful lot to short-circuit that process.  One example: buy the company you work for.  When you have a couple of billion lying around you have many interesting options for solving problems.)<br><br><br>There are many reasons why most hiring happens privately.  One is that publicly visible job offers get spammed by hundreds of resumes (particularly in this economy) from people who are stunningly inappropriate for the position.  The other is that other companies are so bad at hiring that, if you don’t have close personal knowledge about the candidate, you might accidentally hire a non-FizzBuzzer.<br><br></p><h2 id="Networking-it-isn’t-just-for-TCP-packets"><a href="#Networking-it-isn’t-just-for-TCP-packets" class="headerlink" title="Networking: it isn’t just for TCP packets"></a>Networking: it isn’t just for TCP packets</h2><p>Networking just means a) meeting people who at some point can do things for you (or vice versa) and b) making a favorable impression on them.<br><br><br>There are many places to meet people.  Events in your industry, such as conferences or academic symposia which get seen by non-academics, are one.  User groups are another.  Keep in mind that user groups draw a very different crowd than industry conferences and optimize accordingly.<br><br><br>Strive to help people.  It is the right thing to do, and people are keenly aware of who have in the past given them or theirs favors.  If you ever can’t help someone but know someone who can, pass them to the appropriate person with a recommendation.  If you do this right, two people will be happy with you and favorably disposed to helping you out in the future.<br><br><br>You can meet people over the Internet (oh God, can you), but something in our monkey brains makes in-the-flesh meeting a bigger thing.  I’ve Internet-met a great many people who I’ve then gone on to meet in real life.  The physical handshake is a major step up in the relationship, even when Internet-meeting lead to very consequential things like “Made them a lot of money through good advice.”  Definitely blog and participate on your industry-appropriate watering holes like HN, but make it out to the meetups for it.<br><br></p><h2 id="Academia-is-not-like-the-real-world"><a href="#Academia-is-not-like-the-real-world" class="headerlink" title="Academia is not like the real world"></a>Academia is not like the real world</h2><p>Your GPA largely doesn’t matter (modulo one high profile exception: a multinational advertising firm).  To the extent that it does matter, it only determines whether your resume gets selected for job interviews.  If you’re reading the rest of this, you know that your resume isn’t the primary way to get job interviews, so don’t spend huge amount of efforts optimizing something that you either have sufficiently optimized already (since you’ll get the same amount of interviews at 3.96 as you will at 3.8) or that you don’t need at all (since you’ll get job interviews because you’re competent at asking the right people to have coffee with you).<br><br><br>Your major and minor don’t matter.  Most decisionmakers in industry couldn’t tell the difference between a major in Computer Science and a major in Mathematics if they tried.  I was once reduced to tears because a minor academic snafu threatened my ability to get a Bachelor of Science with a major in Computer Science, which my advisor told me was more prestigious than a Bachelor of Science in Computer Science.  Academia cares about distinctions like that.  The real world does not.<br><br><br>Your professors might understand how the academic job market works (short story: it is ridiculously inefficient in engineering and fubared beyond mortal comprehension in English) but they often have quixotic understandings of how the real world works.  For example, they may push you to get extra degrees because a) it sounds like a good idea to them and b) they enjoy having research-producing peons who work for ramen.  Remember, market wages for people capable of producing research are $80~100k+++ in your field.  That buys an awful lot of ramen.<br><br><br>The prof in charge of my research project offered me a spot in his lab, a tuition waiver, and a whole $12,000 dollars as a stipend if I would commit 4~6 years to him.  That’s a great deal if, and only if, you have recently immigrated from a low-wage country and need someone to intervene with the government to get you a visa.<br><br><br>If you really like the atmosphere at universities, that is cool.  Put a backpack on and you can walk into any building at any university in the United States any time you want.  Backpacks are a lot cheaper than working in academia.   You can lead the life of the mind in industry, too — and enjoy less politics and better pay.  You can even get published in journals, if that floats your boat.  (After you’ve escaped the mind-warping miasma of academia, you might rightfully question whether Published In A Journal is really personally or societally significant as opposed to close approximations like Wrote A Blog Post And Showed It To Smart People.)<br><br></p><h2 id="How-much-money-do-engineers-make"><a href="#How-much-money-do-engineers-make" class="headerlink" title="How much money do engineers make?"></a>How much money do engineers make?</h2><p>Wrong question.  The right question is “What kind of offers do engineers routinely work for?”, because salary is one of many levers that people can use to motivate you.  The answer to this is, less than helpfully, “Offers are all over the map.”</p><p><br><br>In general, big companies pay more (money, benefits, etc) than startups.  Engineers with high perceived value make more than those with low perceived value.  Senior engineers make more than junior engineers.  People working in high-cost areas make more than people in low-cost areas.  People who are skilled in negotiation make more than those who are not.</p><p><br><br>We have strong cultural training to not ask about salary, ever.  This is not universal.  In many cultures, professional contexts are a perfectly appropriate time to discuss money.  (If you were a middle class Japanese man, you could reasonably be expected to reveal your exact salary to a 2nd date, anyone from your soccer club, or the guy who makes your sushi.  If you owned a company, you’d probably be cagey about your net worth but you’d talk about employee salaries the way programmers talk about compilers — quite frequently, without being embarrassed.)   If I were a Marxist academic or a conspiracy theorist, I might think that this bit of middle class American culture was specifically engineered to be in the interests of employers and against the interests of employees.  Prior to a discussion of salary at any particular target employer, you should speak to someone who works there in a similar situation and ask about the salary range for the position.  It is &lt;%= Date.today.year %&gt;; you can find these people online.  (LinkedIn, Facebook, Twitter, and your (non-graph-database) social networks are all good to lean on.)</p><p><br><br>Anyhow.  Engineers are routinely offered a suite of benefits.  It is worth worrying, in the United States, about health insurance (traditionally, you get it and your employer foots most or all of the costs) and your retirement program, which is some variant of “we will match contributions to your 401k up to X% of salary.”  The value of that is easy to calculate: X% of salary.  (It is free money, so always max out your IRA up to the employer match.  Put it in index funds and forget about it for 40 years.)</p><p><br><br>There are other benefits like “free soda”, “catered lunches”, “free programming books”, etc.  These are social signals more than anything else.  When I say that I’m going to buy you soda, that says a specific thing about how I run my workplace, who I expect to work for me, and how I expect to treat them.  (It says “I like to move the behavior of unsophisticated young engineers by making this job seem fun by buying 20 cent cans of soda, saving myself tens of thousands in compensation while simultaneously encouraging them to ruin their health.”  And I like soda.)  Read social signals and react appropriately — someone who signals that, e.g., employee education is worth paying money for might very well be a great company to work for — but don’t give up huge amounts of compensation in return for perks that you could trivially buy.</p><h2 id="How-do-I-become-better-at-negotiation"><a href="#How-do-I-become-better-at-negotiation" class="headerlink" title="How do I become better at negotiation?"></a>How do I become better at negotiation?</h2><p>This could be a post in itself.  Short version:<br><br><br>a)  Remember you’re selling the solution to a business need (raise revenue or decrease costs) rather than programming skill or your beautiful face.</p><p><br><br>b)  Negotiate aggressively with appropriate confidence, like the ethical professional you are.  It is what your counterparty is probably doing.  You’re aiming for a mutual beneficial offer, not for saying Yes every time they say something.</p><p><br><br>c)  “What is your previous salary?” is employer-speak for “Please give me reasons to pay you less money.”  Answer appropriately.</p><p><br><br>d)  Always have a counteroffer.  Be comfortable counteroffering around axes you care about other than money.  If they can’t go higher on salary then talk about vacation instead.</p><p><br><br>e)  The only time to ever discuss salary is after you have reached agreement in principle that they will hire you if you can strike a mutually beneficial deal.  This is late in the process after they have invested a lot of time and money in you, specifically, not at the interview.  Remember that there are large costs associated with them saying “No, we can’t make that work” and, appropriately, they will probably not scuttle the deal over comparatively small issues which matter quite a bit to you, like e.g. taking their offer and countering for that plus a few thousand bucks then sticking to it.</p><p><br><br>f)  Read a book.  Many have been written about negotiation.  I like Getting To Yes.  It is a little disconcerting that negotiation skills are worth thousands of dollars per year for your entire career but engineers think that directed effort to study them is crazy when that could be applied to trivialities about a technology that briefly caught their fancy.</p><h2 id="How-to-value-an-equity-grant"><a href="#How-to-value-an-equity-grant" class="headerlink" title="How to value an equity grant:"></a>How to value an equity grant:</h2><p><br><br>Roll d100.  (Not the right kind of geek?  Sorry.  rand(100) then.)<br><br><br>0~70: Your equity grant is worth nothing.<br><br><br>71~94: Your equity grant is worth a lump sum of money which makes you about as much money as you gave up working for the startup, instead of working for a megacorp at a higher salary with better benefits.<br><br><br>95~99: Your equity grant is a lifechanging amount of money.  You won’t feel rich — you’re not the richest person you know, because many of the people you spent the last several years with are now richer than you by definition — but your family will never again give you grief for not having gone into $FAVORED_FIELD like a proper $YOUR_INGROUP.</p><p><br><br>100: You worked at the next Google, and are rich beyond the dreams of avarice.  Congratulations.</p><p><br><br>Perceptive readers will note that 100 does not actually show up on a d100 or rand(100).</p><h2 id="Why-are-you-so-negative-about-equity-grants"><a href="#Why-are-you-so-negative-about-equity-grants" class="headerlink" title="Why are you so negative about equity grants?"></a>Why are you so negative about equity grants?</h2><p>Because you radically overestimate the likelihood that your startup will succeed and radically overestimate the portion of the pie that will be allocated to you if the startup succeeds.  Read about dilution and liquidation preferences on Hacker News or Venture Hacks, then remember that there are people who know more about negotiating deals than you know about programming and imagine what you could do to a program if there were several hundred million on the line.</p><h2 id="Are-startups-great-for-your-career-as-a-fresh-graduate"><a href="#Are-startups-great-for-your-career-as-a-fresh-graduate" class="headerlink" title="Are startups great for your career as a fresh graduate?"></a>Are startups great for your career as a fresh graduate?</h2><p>The high-percentage outcome is you work really hard for the next couple of years, fail ingloriously, and then be jobless and looking to get into another startup.  If you really wanted to get into a startup two years out of school, you could also just go work at a megacorp for the next two years, earn a bit of money, then take your warchest, domain knowledge, and contacts and found one.<br><br><br>Working at a startup, you tend to meet people doing startups.  Most of them will not be able to hire you in two years.  Working at a large corporation, you tend to meet other people in large corporations in your area.  Many of them either will be able to hire you or will have the ear of someone able to hire you in two years.</p><h2 id="So-would-you-recommend-working-at-a-startup"><a href="#So-would-you-recommend-working-at-a-startup" class="headerlink" title="So would you recommend working at a startup?"></a>So would you recommend working at a startup?</h2><p>Working in a startup is a career path but, more than that, it is a lifestyle choice.  This is similar to working in investment banking or academia.  Those are three very different lifestyles.  Many people will attempt to sell you those lifestyles as being in your interests, for their own reasons.  If you genuinely would enjoy that lifestyle, go nuts.  If you only enjoy certain bits of it, remember that many things are available a la carte if you really want them.  For example, if you want to work on cutting-edge technology but also want to see your kids at 5:30 PM, you can work on cutting-edge technology at many, many, many megacorps.<br><br><br>(Yeah, really.  If it creates value for them, heck yes, they’ll invest in it.  They’ll also invest in a lot of CRUD apps, but then again, so do startups — they just market making CRUD apps better than most megacorps do.  The first hour of the Social Network is about making a CRUD app seem like sexy, the second is a Lifetime drama about a divorce improbably involving two heterosexual men.)</p><h2 id="Your-most-important-professional-skill-is-communication"><a href="#Your-most-important-professional-skill-is-communication" class="headerlink" title="Your most important professional skill is communication"></a>Your most important professional skill is communication</h2><p>Remember engineers are not hired to create programs and how they are hired to create business value?  The dominant quality which gets you jobs is the ability to give people the perception that you will create value.  This is not necessarily coextensive with ability to create value.<br><br><br>Some of the best programmers I know are pathologically incapable of carrying on a conversation.  People disproportionately a) wouldn’t want to work with them or b) will underestimate their value-creation ability because they gain insight into that ability through conversation and the person just doesn’t implement that protocol.  Conversely, people routinely assume that I am among the best programmers they know entirely because a) there exists observable evidence that I can program and b) I write and speak really, really well.<br><br><br>(Once upon a time I would have described myself as “Slightly below average” in programming skill.  I have since learned that I had a radically skewed impression of the skill distribution, that programming skill is not what people actually optimize for, and that modesty is against my interests.  These days if you ask me how good of a programmer I am I will start telling you stories about how I have programmed systems which helped millions of kids learn to read or which provably made companies millions.  The question of where I am on the bell curve matters to no one, so why bother worrying about it?)<br><br><br>Communication is a skill.  Practice it: you will get better.  One key sub-skill is being able to quickly, concisely, and confidently explain how you create value to someone who is not an expert in your field and who does not have a priori reasons to love you.  If when you attempt to do this technical buzzwords keep coming up (“Reduced 99th percentile query times by 200 ms by optimizing indexes on…”), take them out and try again.  You should be able to explain what you do to a bright 8 year old, the CFO of your company, or a programmer in a different specialty, at whatever the appropriate level of abstraction is.</p><h2 id="You-will-often-be-called-to-do-Enterprise-Sales-and-other-stuff-you-got-into-engineering-to-avoid"><a href="#You-will-often-be-called-to-do-Enterprise-Sales-and-other-stuff-you-got-into-engineering-to-avoid" class="headerlink" title="You will often be called to do Enterprise Sales and other stuff you got into engineering to avoid"></a>You will often be called to do Enterprise Sales and other stuff you got into engineering to avoid</h2><p>Enterprise Sales is going into a corporation and trying to convince them to spend six or seven figures on buying a system which will either improve their revenue or reduce costs.  Every job interview you will ever have is Enterprise Sales.  Politics, relationships, and communication skills matter a heck of a lot, technical reality not quite so much.<br><br><br>When you have meetings with coworkers and are attempting to convince  them to implement your suggestions, you will also be doing Enterprise Sales.  If getting stuff done is your job description, then convincing people to get stuff done is a core job skill for you.  Spend appropriate effort on getting good at it.  This means being able to communicate effectively in memos, emails, conversations, meetings, and PowerPoint (when appropriate).  It means understanding how to make a business case for a technological initiative.  It means knowing that sometimes you will make technological sacrifices in pursuit of business objectives and that this is the right call.</p><h2 id="Modesty-is-not-a-career-enhancing-character-trait"><a href="#Modesty-is-not-a-career-enhancing-character-trait" class="headerlink" title="Modesty is not a career-enhancing character trait"></a>Modesty is not a career-enhancing character trait</h2><p>Many engineers have self-confidence issues (hello, self).  Many also come from upbringings where modesty with regards to one’s accomplishments is culturally celebrated.  American businesses largely do not value modesty about one’s accomplishments.  The right tone to aim for in interviews, interactions with other people, and life is closer to “restrained, confident professionalism.”<br><br><br>If you are part of a team effort and the team effort succeeds, the right note to hit is not “I owe it all to my team” unless your position is such that everyone will understand you are lying to be modest.  Try for “It was a privilege to assist my team by leading their efforts with regards to $YOUR_SPECIALTY.”  Say it in a mirror a thousand times until you can say it with a straight face.  You might feel like you’re overstating your accomplishments.  Screw that.  Someone who claims to Lead Efforts To Optimize Production while having the title Sandwich Artist is overstating their accomplishments.  You are an engineer.  You work magic which makes people’s lives better.  If you were in charge of the database specifically on an important project involving people then heck yes you lead the database effort which was crucial for the success of the project.  This is how the game is played.  If you feel poorly about it, you’re like a batter who feels poorly about stealing bases in baseball: you’re not morally superior, you’re just playing poorly<br><br></p><h2 id="All-business-decisions-are-ultimately-made-by-one-or-a-handful-of-multi-cellular-organisms-closely-related-to-chimpanzees-not-by-rules-or-by-algorithms"><a href="#All-business-decisions-are-ultimately-made-by-one-or-a-handful-of-multi-cellular-organisms-closely-related-to-chimpanzees-not-by-rules-or-by-algorithms" class="headerlink" title="All business decisions are ultimately made by one or a handful of multi-cellular organisms closely related to chimpanzees, not by rules or by algorithms"></a>All business decisions are ultimately made by one or a handful of multi-cellular organisms closely related to chimpanzees, not by rules or by algorithms</h2><p>People are people.  Social grooming is a really important skill.  People will often back suggestions by friends because they are friends, even when other suggestions might actually be better.  People will often be favoritably disposed to people they have broken bread with.  (There is a business book called Never Eat Alone.  It might be worth reading, but that title is whatever the antonym of deceptive advertising is.)  People routinely favor people who they think are like them over people they think are not like them.  (This can be good, neutral, or invidious.  Accepting that it happens is the first step to profitably exploiting it.)<br><br><br>Actual grooming is at least moderately important, too, because people are hilariously easy to hack by expedients such as dressing appropriately for the situation, maintaining a professional appearance, speaking in a confident tone of voice, etc.  Your business suit will probably cost about as much as a computer monitor.  You only need it once in a blue moon, but when you need it you’ll be really, really, really glad that you have it.  Take my word for it, if I wear everyday casual when I visit e.g. City Hall I get treated like a hapless awkward twenty-something, if I wear the suit I get treated like the CEO of a multinational company.  I’m actually the awkward twenty-something CEO of a multinational company, but I get to pick which side to emphasize when I want favorable treatment from a bureaucrat.<br><br><br>(People familiar with my business might object to me describing it as a multinational company because it is not what most people think of when “multinational company” gets used in conversation.  Sorry — it is a simple conversational hack.  If you think people are pissed off at being manipulated when they find that out, well, some people passionately hate business suits, too.  That doesn’t mean business suits are valueless.  Be appropriate to the circumstances.  Technically true answers are the best kind of answers when the alternative is Immigration deporting you, by the way.)</p><h2 id="At-the-end-of-the-day-your-life-happiness-will-not-be-dominated-by-your-career"><a href="#At-the-end-of-the-day-your-life-happiness-will-not-be-dominated-by-your-career" class="headerlink" title="At the end of the day, your life happiness will not be dominated by your career."></a>At the end of the day, your life happiness will not be dominated by your career.</h2><p>Either talk to older people or trust the social scientists who have: family, faith, hobbies, etc etc generally swamp career achievements and money in terms of things which actually produce happiness.  Optimize appropriately.  Your career is important, and right now it might seem like the most important thing in your life, but odds are that is not what you’ll believe forever.  Work to live, don’t live to work.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每年都有无数年轻程序员，加入软件行业。 他们在学校里学过编程，但是对这个行业的现实一无所知。&lt;br&gt;&lt;a href=&quot;http://www.kalzumeus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Patrick
      
    
    </summary>
    
      <category term="业界" scheme="http://dageger.cn/categories/%E4%B8%9A%E7%95%8C/"/>
    
    
      <category term="程序员 建议" scheme="http://dageger.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98-%E5%BB%BA%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API 设计指南</title>
    <link href="http://dageger.cn/2017/10/19/fe-restapi-guides/"/>
    <id>http://dageger.cn/2017/10/19/fe-restapi-guides/</id>
    <published>2017-10-19T12:20:06.000Z</published>
    <updated>2018-06-20T06:01:20.374Z</updated>
    
    <content type="html"><![CDATA[<p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p><p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现”API First”的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇《理解RESTful架构》，探讨如何理解这个概念。</p><p>今天，我将介绍RESTful API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（1，2）。</p><h2 id="一、协议"><a href="#一、协议" class="headerlink" title="一、协议"></a>一、协议</h2><p>API与用户的通信协议，总是使用<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">HTTPs协议</a>。</p><h2 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h2><p>应该尽量将API部署在专用域名之下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.example.com</div></pre></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://example.org/api/</div></pre></td></tr></table></figure><h2 id="三、版本（Versioning）"><a href="#三、版本（Versioning）" class="headerlink" title="三、版本（Versioning）"></a>三、版本（Versioning）</h2><p>应该将API的版本号放入URL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.example.com/v1/</div></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="external">Github</a>采用这种做法。</p><h2 id="四、路径（Endpoint）"><a href="#四、路径（Endpoint）" class="headerlink" title="四、路径（Endpoint）"></a>四、路径（Endpoint）</h2><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><ul><li><a href="https://api.example.com/v1/zoos" target="_blank" rel="external">https://api.example.com/v1/zoos</a></li><li><a href="https://api.example.com/v1/animals" target="_blank" rel="external">https://api.example.com/v1/animals</a></li><li><a href="https://api.example.com/v1/employees" target="_blank" rel="external">https://api.example.com/v1/employees</a></li></ul><h2 id="五、HTTP动词"><a href="#五、HTTP动词" class="headerlink" title="五、HTTP动词"></a>五、HTTP动词</h2><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>还有两个不常用的HTTP动词。</p><ul><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><p>下面是一些例子。</p><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul><h2 id="六、过滤信息（Filtering）"><a href="#六、过滤信息（Filtering）" class="headerlink" title="六、过滤信息（Filtering）"></a>六、过滤信息（Filtering）</h2><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h2 id="七、状态码（Status-Codes）"><a href="#七、状态码（Status-Codes）" class="headerlink" title="七、状态码（Status Codes）"></a>七、状态码（Status Codes）</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">这里</a>。</p><h2 id="八、错误处理（Error-handling）"><a href="#八、错误处理（Error-handling）" class="headerlink" title="八、错误处理（Error handling）"></a>八、错误处理（Error handling）</h2><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    error: "Invalid API key"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="九、返回结果"><a href="#九、返回结果" class="headerlink" title="九、返回结果"></a>九、返回结果</h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ul><h2 id="十、Hypermedia-API"><a href="#十、Hypermedia-API" class="headerlink" title="十、Hypermedia API"></a>十、Hypermedia API</h2><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"link"</span>: &#123;</div><div class="line">        <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</div><div class="line">        <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</div><div class="line">        <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</div><div class="line">  <span class="attr">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="api.github.com/user">api.github.com/user</a>，然后就得到了下面结果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Requires authentication"</span>,</div><div class="line">  <span class="attr">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h2 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a>十一、其他</h2><p>（1）API的身份认证应该使用OAuth 2.0框架。</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。&lt;/p&gt;
&lt;p&gt;因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现”API First”的设计思想。RESTfu
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="REST API" scheme="http://dageger.cn/tags/REST-API/"/>
    
  </entry>
  
  <entry>
    <title>CSS中设置border属性为0与none的区别</title>
    <link href="http://dageger.cn/2017/09/19/fe-css-border/"/>
    <id>http://dageger.cn/2017/09/19/fe-css-border/</id>
    <published>2017-09-19T14:37:14.000Z</published>
    <updated>2018-06-19T07:18:39.731Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在我们设置CSS的时候，对标签元素不设置边框属性或者取消边框属性一般设置为：border:none;或border:0;两种方法均可。border:none;与border:0;的区别体现有两点：一是理论上的性能差异、二是浏览器兼容性的差异。</p></blockquote><h2 id="性能差异"><a href="#性能差异" class="headerlink" title="性能差异"></a>性能差异</h2><p>【border:0;】把border设为“0”像素虽然在页面上看不见，但按border默认值理解，浏览器依然对border-width/border-color进行了渲染，即已经占用了内存值。<br><br>【border:none;】把border设为“none”即没有，浏览器解析“none”时将不作出渲染动作，即不会消耗内存值。</p><h2 id="兼容性差异"><a href="#兼容性差异" class="headerlink" title="兼容性差异"></a>兼容性差异</h2><p>兼容性差异只针对浏览器IE6、IE7与标签button、input而言，在win、win7、vista 的XP主题下均会出现此情况。<br></p><p>【border:none;】当border为“none”时似乎对IE6/7无效边框依然存在，如下例<br><img src="./1.png" alt=""><br><br><br>【border:0;】当border为“0”时，感觉比“none”更有效，所有浏览器都一致把边框隐藏<br><img src="./2.png" alt=""></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>对比border:0;与border:none;之间的区别在于有渲染和没渲染，感觉他们和display:none;与 visibility:hidden;的关系类似，而对于border属性的渲染性能对比暂时没找测试的方法，虽然认为他们存在渲染性能上的差异但也只能说是理论上。</p></li><li><p>如何让border:none;实现全兼容？只需要在同一选择符上添加背景属性即可<br><img src="./3.png" alt=""><br>对于border:0;与border:none;个人更向于使用,border:none;，因为border:none;毕竟在性能消耗没有争议，而且兼容性可用背景属性解决不足以成为障碍。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在我们设置CSS的时候，对标签元素不设置边框属性或者取消边框属性一般设置为：border:none;或border:0;两种方法均可。border:none;与border:0;的区别体现有两点：一是理论上的性能差异、二是浏览器兼容性的差异。&lt;/p
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://dageger.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>js 中的浅拷贝和深拷贝</title>
    <link href="http://dageger.cn/2017/09/13/fe-js-copyy/"/>
    <id>http://dageger.cn/2017/09/13/fe-js-copyy/</id>
    <published>2017-09-13T02:37:42.000Z</published>
    <updated>2018-06-19T07:21:02.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在读 zepto 的源码，深有感触，感觉随便一段代码都可以延伸出一大堆的知识点，在看到深拷贝和浅拷贝的时候，之前只是了解过什么是深拷贝什么是浅拷贝，并没有对齐实现进行探索，所以本文主要讲一下什么是深拷贝、什么是浅拷贝、深拷贝与浅拷贝的区别，以及怎么进行深拷贝和怎么进行浅拷贝</p><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p>其实深拷贝和浅拷贝的主要区别就是其在内存中的存储类型不同。<br>堆和栈都是内存中划分出来用来存储的区域。</p><blockquote><p>栈（stack）为自动分配的内存空间，它由系统自动释放；而堆（heap）则是动态分配的内存，大小不定也不会自动释放。</p></blockquote><h2 id="ECMAScript-的数据类型"><a href="#ECMAScript-的数据类型" class="headerlink" title="ECMAScript 的数据类型"></a>ECMAScript 的数据类型</h2><p>在将深拷贝和浅拷贝之前，我们先来重新回顾一下 ECMAScript 中的数据类型。主要分为</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>基本数据类型主要是：undefined，boolean，number，string，null。</p><h3 id="基本数据类型存放在栈中"><a href="#基本数据类型存放在栈中" class="headerlink" title="基本数据类型存放在栈中"></a>基本数据类型存放在栈中</h3><p>存放在栈内存中的简单数据段，数据大小确定，内存空间大小可以分配，是直接按值存放的，所以可以直接访问。</p><h3 id="基本数据类型值不可变"><a href="#基本数据类型值不可变" class="headerlink" title="基本数据类型值不可变"></a>基本数据类型值不可变</h3><blockquote><p>javascript中的原始值（undefined、null、布尔值、数字和字符串）与对象（包括数组和函数）有着根本区别。原始值是不可更改的：任何方法都无法更改（或“突变”）一个原始值。对数字和布尔值来说显然如此 —— 改变数字的值本身就说不通，而对字符串来说就不那么明显了，因为字符串看起来像由字符组成的数组，我们期望可以通过指定索引来假改字符串中的字符。实际上，javascript 是禁止这样做的。字符串中所有的方法看上去返回了一个修改后的字符串，实际上返回的是一个新的字符串值。</p></blockquote><p>基本数据类型的值是不可变的，动态修改了基本数据类型的值，它的原始值也是不会改变的，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</div><div class="line"><span class="built_in">console</span>.log(str[<span class="number">1</span>]=<span class="string">"f"</span>);    <span class="comment">// f</span></div><div class="line"><span class="built_in">console</span>.log(str);           <span class="comment">// abc</span></div></pre></td></tr></table></figure></p><p>这一点其实开始我是比较迷惑的，总是感觉 js 是一个灵活的语言，任何值应该都是可变的，真是图样图森破，我们通常情况下都是对一个变量重新赋值，而不是改变基本数据类型的值。就如上述引用所说的那样，在 js 中没有方法是可以改变布尔值和数字的。倒是有很多操作字符串的方法，但是这些方法都是返回一个新的字符串，并没有改变其原有的数据。<br>所以，记住这一点：基本数据类型值不可变。</p><h3 id="基本类型的比较是值的比较"><a href="#基本类型的比较是值的比较" class="headerlink" title="基本类型的比较是值的比较"></a>基本类型的比较是值的比较</h3><p>基本类型的比较是值的比较，只要它们的值相等就认为他们是相等的，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a === b);<span class="comment">//true</span></div></pre></td></tr></table></figure></p><p>比较的时候最好使用严格等，因为 == 是会进行类型转换的，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(a == b);<span class="comment">//true</span></div></pre></td></tr></table></figure></p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><h3 id="基本数据类型存放在堆中"><a href="#基本数据类型存放在堆中" class="headerlink" title="基本数据类型存放在堆中"></a>基本数据类型存放在堆中</h3><p>引用类型（object）是存放在堆内存中的，变量实际上是一个存放在栈内存的指针，这个指针指向堆内存中的地址。每个空间大小不一样，要根据情况开进行特定的分配，例如。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;<span class="attr">name</span>:<span class="string">'jozo'</span>&#125;;</div><div class="line"><span class="keyword">var</span> person2 = &#123;<span class="attr">name</span>:<span class="string">'xiaom'</span>&#125;;</div><div class="line"><span class="keyword">var</span> person3 = &#123;<span class="attr">name</span>:<span class="string">'xiaoq'</span>&#125;;</div></pre></td></tr></table></figure><p><img src="./img-jsstack-1.png" alt=""></p><h3 id="引用类型值可变"><a href="#引用类型值可变" class="headerlink" title="引用类型值可变"></a>引用类型值可变</h3><p>引用类型是可以直接改变其值的，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">a[<span class="number">1</span>] = <span class="number">5</span>;</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">1</span>]); <span class="comment">// 5</span></div></pre></td></tr></table></figure></p><h3 id="引用类型的比较是引用的比较"><a href="#引用类型的比较是引用的比较" class="headerlink" title="引用类型的比较是引用的比较"></a>引用类型的比较是引用的比较</h3><p>所以每次我们对 js 中的引用类型进行操作的时候，都是操作其对象的引用（保存在栈内存中的指针），所以比较两个引用类型，是看其的引用是否指向同一个对象。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></div></pre></td></tr></table></figure><p>虽然变量 a 和变量 b 都是表示一个内容为 1，2，3 的数组，但是其在内存中的位置不一样，也就是说变量 a 和变量 b 指向的不是同一个对象，所以他们是不相等的。<br><img src="./img-jsstack-2.png" alt=""></p><h3 id="传值与传址"><a href="#传值与传址" class="headerlink" title="传值与传址"></a>传值与传址</h3><p>了解了基本数据类型与引用类型的区别之后，我们就应该能明白传值与传址的区别了。<br>在我们进行img-jsstack-4.png类型的赋值（=）是在内存中新开辟一段栈内存，然后再把再将值赋值到新的栈中。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 10img-jsstack-4.png</div><div class="line">var b = a;img-jsstack-4.png</div><div class="line">a ++ ;</div><div class="line">console.log(a); // 11</div><div class="line">console.log(b); // 10</div></pre></td></tr></table></figure></p><p><img src="./img-jsstack-3.png" alt=""><br>所以说，基本类型的赋值的两个变量是两个独立相互不影响的变量。<br>但是引用类型的赋值是传址。只是改变指针的指向，例如，也就是说引用类型的赋值是对象保存在栈中的地址的赋值，这样的话两个变量就指向同一个对象，因此两者之间操作互相有影响。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;&#125;; <span class="comment">// a保存了一个空对象的实例</span></div><div class="line"><span class="keyword">var</span> b = a;  <span class="comment">// a和b都指向了这个空对象</span></div><div class="line">a.name = <span class="string">'jozo'</span>;</div><div class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// 'jozo'</span></div><div class="line"><span class="built_in">console</span>.log(b.name); <span class="comment">// 'jozo'</span></div><div class="line">b.age = <span class="number">22</span>;</div><div class="line"><span class="built_in">console</span>.log(b.age);<span class="comment">// 22</span></div><div class="line"><span class="built_in">console</span>.log(a.age);<span class="comment">// 22</span></div><div class="line"><span class="built_in">console</span>.log(a == b);<span class="comment">// true</span></div></pre></td></tr></table></figure></p><p><img src="./img-jsstack-4.png" alt=""></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>在深入了解之前，我认为上面的赋值就是浅拷贝，哇哈哈，真的是图样图森破。上面那个应该只能算是“引用”，并不算是真正的浅拷贝。</p><p>一下部分参照知乎中的提问： <a href="https://www.zhihu.com/question/23031215" target="_blank" rel="external">javascript中的深拷贝和浅拷贝</a></p><h3 id="赋值（-）和浅拷贝的区别"><a href="#赋值（-）和浅拷贝的区别" class="headerlink" title="赋值（=）和浅拷贝的区别"></a>赋值（=）和浅拷贝的区别</h3><p>那么赋值和浅拷贝有什么区别呢，我们看下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">    <span class="string">'name'</span> : <span class="string">'zhangsan'</span>,</div><div class="line">    <span class="string">'age'</span> :  <span class="string">'18'</span>,</div><div class="line">    <span class="string">'language'</span> : [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]],</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1;</div><div class="line"><span class="keyword">var</span> obj3 = shallowCopy(obj1);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dst = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</div><div class="line">        <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</div><div class="line">            dst[prop] = src[prop];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dst;</div><div class="line">&#125;</div><div class="line">obj2.name = <span class="string">"lisi"</span>;</div><div class="line">obj3.age = <span class="string">"20"</span>;</div><div class="line">obj2.language[<span class="number">1</span>] = [<span class="string">"二"</span>,<span class="string">"三"</span>];</div><div class="line">obj3.language[<span class="number">2</span>] = [<span class="string">"四"</span>,<span class="string">"五"</span>];</div><div class="line"><span class="built_in">console</span>.log(obj1);  </div><div class="line"><span class="comment">//obj1 = &#123;</span></div><div class="line"><span class="comment">//    'name' : 'lisi',</span></div><div class="line"><span class="comment">//    'age' :  '18',</span></div><div class="line"><span class="comment">//    'language' : [1,[4,5]],</span></div><div class="line"><span class="comment">//&#125;;</span></div><div class="line"><span class="built_in">console</span>.log(obj2);</div><div class="line"><span class="comment">//obj2 = &#123;</span></div><div class="line"><span class="comment">//    'name' : 'lisi',</span></div><div class="line"><span class="comment">//    'age' :  '18',</span></div><div class="line"><span class="comment">//    'language' : [1,[4,5]],</span></div><div class="line"><span class="comment">//&#125;;</span></div><div class="line"><span class="built_in">console</span>.log(obj3);</div><div class="line"><span class="comment">//obj3 = &#123;</span></div><div class="line"><span class="comment">//    'name' : 'zhangsan',</span></div><div class="line"><span class="comment">//    'age' :  '20',</span></div><div class="line"><span class="comment">//    'language' : [1,[4,5]],</span></div><div class="line"><span class="comment">//&#125;;</span></div></pre></td></tr></table></figure></p><p>先定义个一个原始的对象 obj1，然后使用赋值得到第二个对象 obj2，然后通过浅拷贝，将 obj1 里面的属性都赋值到 obj3 中。也就是说：<br></p><ol><li>obj1：原始数据</li><li>obj2：赋值操作得到</li><li>obj3：浅拷贝得到</li></ol><p>然后我们改变 obj2 的 name 属性和 obj3 的 name 属性，可以看到，改变赋值得到的对象 obj2 同时也会改变原始值 obj1，而改变浅拷贝得到的的 obj3 则不会改变原始对象 obj1。这就可以说明赋值得到的对象 obj2 只是将指针改变，其引用的仍然是同一个对象，而浅拷贝得到的的 obj3 则是重新创建了新对象。<br><br>然而，我们接下来来看一下改变引用类型会是什么情况呢，我又改变了赋值得到的对象 obj2 和浅拷贝得到的 obj3 中的 language 属性的第二个值和第三个值（language 是一个数组，也就是引用类型）。结果见输出，可以看出来，无论是修改赋值得到的对象 obj2 和浅拷贝得到的 obj3 都会改变原始数据。<br><br>这是因为浅拷贝只复制一层对象的属性，并不包括对象里面的为引用类型的数据。所以就会出现改变浅拷贝得到的 obj3 中的引用类型时，会使原始数据得到改变。<br><br>深拷贝：将 B 对象拷贝到 A 对象中，包括 B 里面的子对象<br><br>浅拷贝：将 B 对象拷贝到 A 对象中，但不包括 B 里面的子对象</p><table><thead><tr><th style="text-align:center">–</th><th style="text-align:center">和原数据是否指向同一对象</th><th>第一层数据为基本数据类型</th><th>原数据中包含子对象</th></tr></thead><tbody><tr><td style="text-align:center">赋值</td><td style="text-align:center">是</td><td>改变会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td style="text-align:center">浅拷贝</td><td style="text-align:center">否</td><td>改变不会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td style="text-align:center">深拷贝</td><td style="text-align:center">否</td><td>改变不会使原数据一同改变</td><td>改变不会使原数据一同改变</td></tr></tbody></table><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>看了这么半天，你也应该清楚什么是深拷贝了吧，如果还不清楚，我就剖腹自尽(?_?)<br><br>深拷贝是对对象以及对象的所有子对象进行拷贝。<br>那么问题来了，怎么进行深拷贝呢？<br>思路就是递归调用刚刚的浅拷贝，把所有属于对象的属性类型都遍历赋给另一个对象即可。我们直接来看一下 Zepto 中深拷贝的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/ 内部方法：用户合并一个或多个对象到第一个对象</div><div class="line"><span class="comment">// 参数：</span></div><div class="line"><span class="comment">// target 目标对象  对象都合并到target里</span></div><div class="line"><span class="comment">// source 合并对象</span></div><div class="line"><span class="comment">// deep 是否执行深度合并</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source)</div><div class="line">        <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</div><div class="line">            <span class="comment">// source[key] 是对象，而 target[key] 不是对象， 则 target[key] = &#123;&#125; 初始化一下，否则递归会出错的</span></div><div class="line">            <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</div><div class="line">                target[key] = &#123;&#125;</div><div class="line">            <span class="comment">// source[key] 是数组，而 target[key] 不是数组，则 target[key] = [] 初始化一下，否则递归会出错的</span></div><div class="line">            <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</div><div class="line">                target[key] = []</div><div class="line">            <span class="comment">// 执行递归</span></div><div class="line">            extend(target[key], source[key], deep)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 不满足以上条件，说明 source[key] 是一般的值类型，直接赋值给 target 就是了</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</div><div class="line">&#125;</div><div class="line"><span class="comment">// Copy all but undefined properties from one or more</span></div><div class="line"><span class="comment">// objects to the `target` object.</span></div><div class="line">$.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">    <span class="comment">//第一个参数为boolean值时，表示是否深度合并</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</div><div class="line">        deep = target;</div><div class="line">        <span class="comment">//target取第二个参数</span></div><div class="line">        target = args.shift()</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 遍历后面的参数，都合并到target上</span></div><div class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; extend(target, arg, deep) &#125;)</div><div class="line">    <span class="keyword">return</span> target</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 Zepto 中的 $.extend 方法判断的第一个参数传入的是一个布尔值，判断是否进行深拷贝。<br><br>在 $.extend 方法内部，只有一个形参 target，这个设计你真的很巧妙。<br>因为形参只有一个，所以 target 就是传入的第一个参数的值，并在函数内部设置一个变量 args 来接收去除第一个参数的其余参数，如果该值是一个布尔类型的值的话，说明要启用深拷贝，就将 deep 设置为 true，并将 target 赋值为 args 的第一个值（也就是真正的 target）。如果该值不是一个布尔类型的话，那么传入的第一个值仍为 target 不需要进行处理，只需要遍历使用 extend 方法就可以。<br><br>这里有点绕，但是真的设计的很精妙，建议自己打断点试一下，会有意外收获（玩转 js 的大神请忽略）。<br><br>而在 extend 的内部，是拷贝的过程。<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在读 zepto 的源码，深有感触，感觉随便一段代码都可以延伸出一大堆的知识点，在看到深拷贝和浅拷贝的时候，之前只是了解过什么是深拷贝什
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://dageger.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>2017年最新的head元素指南</title>
    <link href="http://dageger.cn/2017/09/04/fe-html-all-head/"/>
    <id>http://dageger.cn/2017/09/04/fe-html-all-head/</id>
    <published>2017-09-04T07:31:00.000Z</published>
    <updated>2018-06-19T07:23:29.574Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理了一份关于可以写入到HTML 标签中的内容清单-2017年最新的 <head> 元素指南，主要内容来自 <head> cheatsheet ，让大家了解每个标签及相应属性的意义，写出满足自己需求的 <head> 头部标签，可以很有效的增强页面的可用性。</head></head></head></p></blockquote><h3 id="最小推荐"><a href="#最小推荐" class="headerlink" title="最小推荐"></a>最小推荐</h3><p>下面是基本的、最低限度的网站基本标签：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="网页元素"><a href="#网页元素" class="headerlink" title="网页元素"></a>网页元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 文档标题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 基本 URL 作用于文档中所包含的所有相对 URL --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"https://example.com/page.html"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 外部的 CSS --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 文档内的 CSS --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  /* ... */</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- JavaScript --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="comment">&lt;!--无 JS 时的替代--&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Meta-标签"><a href="#Meta-标签" class="headerlink" title="Meta 标签"></a>Meta 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置文档的字符编码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 允许控制资源的过度加载 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 尽早地放置在文档中 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 仅应用于该标签下的内容 --&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- Web 应用的名称（仅当网站被用作为一个应用时才使用）--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"application-name"</span> <span class="attr">content</span>=<span class="string">"应用名称"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 针对页面的简短描述（限制 150 字符）--&gt;</span></div><div class="line"><span class="comment">&lt;!-- 在*某些*情况下，该描述是被用作搜索结果展示片段的一部分 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"一个页面描述"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 控制搜索引擎的抓取和索引行为 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>&gt;</span><span class="comment">&lt;!-- 所有搜索引擎 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"googlebot"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>&gt;</span><span class="comment">&lt;!-- 仅对 Google 有效 --&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 告诉 Google 不显示网站链接的搜索框 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"nositelinkssearchbox"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 告诉 Google 不提供此页面的翻译 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"notranslate"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 验证 Google 搜索控制台的所有权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 验证 Yandex 网站管理员的所有权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"yandex-verification"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 验证 Bing 网站管理员中心的所有权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msvalidate.01"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 验证 Alexa 控制台的所有权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"alexaVerifyID"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 验证 Pinterest 控制台的所有权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"p:domain_verify"</span> <span class="attr">content</span>=<span class="string">"code from pinterest"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 验证 Norton 安全站点的所有权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"norton-safeweb-site-verification"</span> <span class="attr">content</span>=<span class="string">"norton code"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 用来命名软件或用于构建网页（如 - WordPress、Dreamweaver）--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"program"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 关于你的网站主题的简短描述 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">content</span>=<span class="string">"你的网站主题"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 基于网站内容给出一般的年龄分级 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"rating"</span> <span class="attr">content</span>=<span class="string">"General"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 允许控制 referrer 信息如何传递 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 禁用自动检测和格式化可能的电话号码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 通过设置为 “off” 完全退出 DNS 预取 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"off"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 在客户端存储 cookie，web 浏览器的客户端识别 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"set-cookie"</span> <span class="attr">content</span>=<span class="string">"name=value; expires=date; path=url"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 指定要显示在一个特定框架中的页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Window-Target"</span> <span class="attr">content</span>=<span class="string">"_value"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 地理标签 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"ICBM"</span> <span class="attr">content</span>=<span class="string">"latitude, longitude"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"geo.position"</span> <span class="attr">content</span>=<span class="string">"latitude;longitude"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"geo.region"</span> <span class="attr">content</span>=<span class="string">"country[-state]"</span>&gt;</span><span class="comment">&lt;!-- 国家代码 (ISO 3166-1): 强制性, 州代码 (ISO 3166-2): 可选; 如 content="US" / content="US-NY" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"geo.placename"</span> <span class="attr">content</span>=<span class="string">"city/town"</span>&gt;</span><span class="comment">&lt;!-- 如 content="New York City" --&gt;</span></div></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 表明一个 CSS 样式表 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://example.com/styles.css"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 有助于防止出现内容重复的问题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"https://example.com/2010/06/9-things-to-do-before-entering-social-media.html"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 之前用于包含 icon 链接，但已被废弃并不再使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortlink"</span> <span class="attr">href</span>=<span class="string">"https://example.com/?p=42"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 链接到当前文档的一个 AMP HTML 版本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"amphtml"</span> <span class="attr">href</span>=<span class="string">"https://example.com/path/to/amp-version.html"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 链接到一个指定 Web 应用程序“安装”证书的 JSON 文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 链接到文档的作者 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"author"</span> <span class="attr">href</span>=<span class="string">"humans.txt"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 指向一个适用于链接内容的版权申明 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"copyright.html"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 给出可能的你的另一种语言的文档位置参考 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"https://es.example.com/"</span> <span class="attr">hreflang</span>=<span class="string">"es"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 提供了关于作者或其他人的信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"me"</span> <span class="attr">href</span>=<span class="string">"https://google.com/profiles/thenextweb"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"me"</span> <span class="attr">href</span>=<span class="string">"mailto:name@example.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"me"</span> <span class="attr">href</span>=<span class="string">"sms:+15035550125"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 链接到一个描述历史记录、文档或其他具有历史意义的材料的集合的文档。 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"archives"</span> <span class="attr">href</span>=<span class="string">"https://example.com/archives/"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 链接到层次结构中的顶级资源 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"index"</span> <span class="attr">href</span>=<span class="string">"https://example.com/"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 给出一个自我参考 - 当文档有多个可能的参考时非常有用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"self"</span> <span class="attr">type</span>=<span class="string">"application/atom+xml"</span> <span class="attr">href</span>=<span class="string">"https://example.com/atomFeed.php?page=3"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 分别是在一系列文件中的第一个、下一个、上一个和最后一个 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"first"</span> <span class="attr">href</span>=<span class="string">"https://example.com/atomFeed.php"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"next"</span> <span class="attr">href</span>=<span class="string">"https://example.com/atomFeed.php?page=4"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prev"</span> <span class="attr">href</span>=<span class="string">"https://example.com/atomFeed.php?page=2"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"last"</span> <span class="attr">href</span>=<span class="string">"https://example.com/atomFeed.php?page=147"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 当使用第三方服务来维护 blog 时使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"EditURI"</span> <span class="attr">href</span>=<span class="string">"https://example.com/xmlrpc.php?rsd"</span> <span class="attr">type</span>=<span class="string">"application/rsd+xml"</span> <span class="attr">title</span>=<span class="string">"RSD"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 当另一个 WordPress 博客链接到你的 WordPress 博客或文章时形成一个自动化的评论 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"pingback"</span> <span class="attr">href</span>=<span class="string">"https://example.com/xmlrpc.php"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 当你在自己的页面上链接到一个 url 时通知它 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"webmention"</span> <span class="attr">href</span>=<span class="string">"https://example.com/webmention"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 加载一个外部的 HTML 文件到当前 HTML 文件中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"/path/to/component.html"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 打开搜索 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"search"</span> <span class="attr">href</span>=<span class="string">"/open-search.xml"</span> <span class="attr">type</span>=<span class="string">"application/opensearchdescription+xml"</span> <span class="attr">title</span>=<span class="string">"Search Title"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- Feeds --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"https://feeds.feedburner.com/example"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"https://example.com/feed.atom"</span> <span class="attr">type</span>=<span class="string">"application/atom+xml"</span> <span class="attr">title</span>=<span class="string">"Atom 0.3"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 预取，预载，预浏览 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"https://example.com/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"image.png"</span> <span class="attr">as</span>=<span class="string">"image"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 更多信息：https://css-tricks.com/prefetching-preloading-prebrowsing/ --&gt;</span></div></pre></td></tr></table></figure><h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 针对 IE 10 及以下版本 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果将 `favicon.ico` 放在根目录下，则无需标签 --&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 对于 IE 11、Chrome、Firefox、Safari 和 Opera --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span> <span class="attr">href</span>=<span class="string">"/path/to/favicon-16x16.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> <span class="attr">href</span>=<span class="string">"/path/to/favicon-32x32.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"96x96"</span> <span class="attr">href</span>=<span class="string">"/path/to/favicon-96x96.png"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 更多信息: https://bitsofco.de/all-about-favicons-and-touch-icons/ --&gt;</span></div></pre></td></tr></table></figure><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><h4 id="Facebook-Open-Graph"><a href="#Facebook-Open-Graph" class="headerlink" title="Facebook Open Graph"></a>Facebook Open Graph</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"fb:app_id"</span> <span class="attr">content</span>=<span class="string">"123456789"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"https://example.com/page.html"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"website"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"Content Title"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"https://example.com/image.jpg"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"Description Here"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:site_name"</span> <span class="attr">content</span>=<span class="string">"Site Name"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:locale"</span> <span class="attr">content</span>=<span class="string">"en_US"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"article:author"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="Facebook-Instant-Articles"><a href="#Facebook-Instant-Articles" class="headerlink" title="Facebook Instant Articles"></a>Facebook Instant Articles</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"op:markup_version"</span> <span class="attr">content</span>=<span class="string">"v1.0"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 你的文章的 Web 版网址 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article.html"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 用于该文章的样式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"fb:article_style"</span> <span class="attr">content</span>=<span class="string">"myarticlestyle"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="Twitter-Cards"><a href="#Twitter-Cards" class="headerlink" title="Twitter Cards"></a>Twitter Cards</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:card"</span> <span class="attr">content</span>=<span class="string">"summary"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:site"</span> <span class="attr">content</span>=<span class="string">"@site_account"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:creator"</span> <span class="attr">content</span>=<span class="string">"@individual_account"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:url"</span> <span class="attr">content</span>=<span class="string">"https://example.com/page.html"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:title"</span> <span class="attr">content</span>=<span class="string">"Content Title"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:description"</span> <span class="attr">content</span>=<span class="string">"Content description less than 200 characters"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:image"</span> <span class="attr">content</span>=<span class="string">"https://example.com/image.jpg"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="Google-Schema-org"><a href="#Google-Schema-org" class="headerlink" title="Google+ / Schema.org"></a>Google+ / Schema.org</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://plus.google.com/+YourPage"</span> <span class="attr">rel</span>=<span class="string">"publisher"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"name"</span> <span class="attr">content</span>=<span class="string">"内容标题"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"内容描述少于 200 个字符"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> <span class="attr">content</span>=<span class="string">"https://example.com/image.jpg"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="OEmbed"><a href="#OEmbed" class="headerlink" title="OEmbed"></a>OEmbed</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/json+oembed"</span></span></div><div class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"http://example.com/services/oembed?url=http%3A%2F%2Fexample.com%2Ffoo%2F&amp;format=json"</span></span></div><div class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"oEmbed Profile: JSON"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"text/xml+oembed"</span></span></div><div class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"http://example.com/services/oembed?url=http%3A%2F%2Fexample.com%2Ffoo%2F&amp;format=xml"</span></span></div><div class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"oEmbed Profile: XML"</span>/&gt;</span></div></pre></td></tr></table></figure><h3 id="浏览器-平台"><a href="#浏览器-平台" class="headerlink" title="浏览器 / 平台"></a>浏览器 / 平台</h3><h4 id="Apple-iOS"><a href="#Apple-iOS" class="headerlink" title="Apple iOS"></a>Apple iOS</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 智能应用 Banner --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=APP_ID,affiliate-data=AFFILIATE_ID,app-argument=SOME_TEXT"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 禁用自动检测和格式化可能的电话号码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 添加到主屏幕 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"应用标题"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 触摸图标 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 在大多数情况下，在 `&lt;head&gt;` 中，一个 180×180px 触摸图标就已经足够了 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/path/to/apple-touch-icon.png"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 注意：iOS 7 上的 Safari 不会对图标产生效果。 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 较早版本的 Safari 不会对以 `-precomposed.png` 后缀命名的图标文件产生效果。 --&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 启动画面（已无效） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"path/to/startup.png"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- iOS 应用深层链接 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=APP-ID, app-argument=http/url-sample.com"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"ios-app://APP-ID/http/url-sample.com"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="Apple-Safari"><a href="#Apple-Safari" class="headerlink" title="Apple Safari"></a>Apple Safari</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 固定网站 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"mask-icon"</span> <span class="attr">href</span>=<span class="string">"path/to/icon.svg"</span> <span class="attr">color</span>=<span class="string">"red"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="Google-Android"><a href="#Google-Android" class="headerlink" title="Google Android"></a>Google Android</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#E64545"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 添加到主屏幕 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 更多信息：https://developer.chrome.com/multidevice/android/installtohomescreen --&gt;</span></div></pre></td></tr></table></figure><h4 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"chrome-webstore-item"</span> <span class="attr">href</span>=<span class="string">"https://chrome.google.com/webstore/detail/APP_ID"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 禁用翻译提示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"notranslate"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="Microsoft-Internet-Explorer"><a href="#Microsoft-Internet-Explorer" class="headerlink" title="Microsoft Internet Explorer"></a>Microsoft Internet Explorer</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"skype_toolbar"</span> <span class="attr">content</span>=<span class="string">"skype_toolbar_parser_compatible"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- IE10: 禁用链接点击高亮 (https://blogs.windows.com/buildingapps/2012/11/15/adapting-your-webkit-optimized-site-for-internet-explorer-10/) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 固定网站 (https://msdn.microsoft.com/en-us/library/dn255024(v=vs.85).aspx) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"application-name"</span> <span class="attr">content</span>=<span class="string">"Sample Title"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tooltip"</span> <span class="attr">content</span>=<span class="string">"A description of what this site does."</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-starturl"</span> <span class="attr">content</span>=<span class="string">"http://example.com/index.html?pinned=true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-navbutton-color"</span> <span class="attr">content</span>=<span class="string">"#FF3300"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-window"</span> <span class="attr">content</span>=<span class="string">"width=800;height=600"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-task"</span> <span class="attr">content</span>=<span class="string">"name=Task 1;action-uri=http://host/Page1.html;icon-uri=http://host/icon1.ico"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-task"</span> <span class="attr">content</span>=<span class="string">"name=Task 2;action-uri=http://microsoft.com/Page2.html;icon-uri=http://host/icon2.ico"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-badge"</span> <span class="attr">value</span>=<span class="string">"frequency=NUMBER_IN_MINUTES;polling-uri=http://example.com/path/to/file.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileColor"</span> <span class="attr">content</span>=<span class="string">"#FF3300"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"path/to/tileimage.jpg"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-config"</span> <span class="attr">content</span>=<span class="string">"http://example.com/browserconfig.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-notification"</span> <span class="attr">content</span>=<span class="string">"frequency=60;polling-uri=http://example.com/livetile;polling-uri2=http://example.com/livetile2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-task-separator"</span> <span class="attr">content</span>=<span class="string">"1"</span>/&gt;</span></div></pre></td></tr></table></figure><h3 id="国内的浏览器"><a href="#国内的浏览器" class="headerlink" title="国内的浏览器"></a>国内的浏览器</h3><h4 id="360-浏览器"><a href="#360-浏览器" class="headerlink" title="360 浏览器"></a>360 浏览器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 选择渲染引擎 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit|ie-comp|ie-stand"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="QQ-移动浏览器"><a href="#QQ-移动浏览器" class="headerlink" title="QQ 移动浏览器"></a>QQ 移动浏览器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在指定方向上锁定屏幕（锁定横/竖屏） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"landscape/portrait"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 全屏显示此页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 页面将以“应用模式”显示（全屏等）--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>/&gt;</span></div></pre></td></tr></table></figure><h4 id="UC-移动浏览器"><a href="#UC-移动浏览器" class="headerlink" title="UC 移动浏览器"></a>UC 移动浏览器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在指定方向上锁定屏幕（锁定横/竖屏） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"landscape/portrait"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 全屏显示此页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 即使在“文本模式”下，UC 浏览器也会显示图片 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"imagemode"</span> <span class="attr">content</span>=<span class="string">"force"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 页面将以“应用模式”显示（全屏、禁止手势等） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 在此页面禁用 UC 浏览器的“夜间模式” --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"nightmode"</span> <span class="attr">content</span>=<span class="string">"disable"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 简化页面，减少数据传输 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"layoutmode"</span> <span class="attr">content</span>=<span class="string">"fitscreen"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 禁用的 UC 浏览器的功能，“当此页面中有较多文本时缩放字体” --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"wap-font-scale"</span> <span class="attr">content</span>=<span class="string">"no"</span>/&gt;</span></div></pre></td></tr></table></figure><h3 id="应用链接"><a href="#应用链接" class="headerlink" title="应用链接"></a>应用链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iOS --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:ios:url"</span> <span class="attr">content</span>=<span class="string">"applinks://docs"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:ios:app_store_id"</span> <span class="attr">content</span>=<span class="string">"12345"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:ios:app_name"</span> <span class="attr">content</span>=<span class="string">"App Links"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- Android --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:android:url"</span> <span class="attr">content</span>=<span class="string">"applinks://docs"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:android:app_name"</span> <span class="attr">content</span>=<span class="string">"App Links"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:android:package"</span> <span class="attr">content</span>=<span class="string">"org.applinks"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- Web 回退 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:web:url"</span> <span class="attr">content</span>=<span class="string">"http://applinks.org/documentation"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 更多信息：http://applinks.org/documentation/ --&gt;</span></div></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>当启用 GZIP 时，移动 href 属性到该元素的开头以提高压缩，因为 href 属性被用于 a、base 和 link 标签。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理了一份关于可以写入到HTML 标签中的内容清单-2017年最新的 &lt;head&gt; 元素指南，主要内容来自 &lt;head&gt; cheatsheet ，让大家了解每个标签及相应属性的意义，写出满足自己需求的 &lt;head&gt; 头部标签，可以很有效的增强页面的
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://dageger.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>互联网革命</title>
    <link href="http://dageger.cn/2017/08/26/cc-cloud-computing/"/>
    <id>http://dageger.cn/2017/08/26/cc-cloud-computing/</id>
    <published>2017-08-26T14:51:27.000Z</published>
    <updated>2018-06-19T07:26:23.307Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>本篇文章为云计算的商业动力之企业ICT转型之一</em></p></blockquote><p>　　基本上所有企业的第一目标都是追逐利益的最大化。</p><p>　　政府与公共事业其实也是如此，只是政府和公共事业的利益是代表国家利益和全民公共利益的最大化，即使是非盈利组织，也会追求在有限投入的情况下，获得最高(数量和质量)的价值输出。所以“利益追求”是商业活动的一个最根本动力。企业对利益的追求，从时间上分为短期利益、中期利益和长期利益。在量化上分为谋基本生存、谋稳步发展、谋快速扩张。企业的商业转型的动力，自然也就来自于这两个方面：外部竞争和环境导致的企业生存压力，以及更多利益的诱惑。</p><p>　　如今，环顾各行各业，每个企业所处环境和生存压力可能不尽相同。但是如果我们把如今企业发展的环境放到历史发展的画卷里，我们会发现，每个时代企业所面临的只要挑战、压力与机会，大部分几乎都是相同的，那就是我们经常在教科书里面一次又一次的商业革命、技术革命和政治革命。”革命不是请客触犯”，而我往往是人头落地，对应到企业，那就是每次革命都会潮起潮落般伴随着大量老企业的消亡和新企业的兴起。</p><p>　　蒸汽机时代的工业革命让大量的手工业作坊消失，取而代之的是小型工厂，电力革命带来流水线作业模式的大规模工厂，又同样淘汰了大量的小型工厂，并逐步诞生了垄断行业的巨头。</p><p>　　20世纪60年代起的第一波信息化革命及计算机革命，让一代IT企业成为股票市场上耀眼的明星与全球首富的诞生地，很多传统企业紧跟这一波信息化的浪潮，将计算机广泛应用到业务中，但相比这一波IT新秀，明显显得黯然失色。</p><p>　　20纪90年代起的第二波信息化革命——互联网革命，一大批一夜暴富的互联网新秀应运而生，第一代IT企业虽然没有立即被掀翻在地，但也迅速的甩到了二流市场地位之中。IT行业的传统企业，除了IT行业的东家——金融行业外，很多企业在互联网的大浪潮下已经显出了疲态，无所适从，因为他们打算建立了互联网网站，却几乎没有从中受益。</p><p>　　从2010年前后掀起的第三波信息化革命——移动互联网革命，同时伴随这互联网行业的商业模式革命，我们的商业世界正式进入了互联网寡头时代(也叫做“大数据时代”)，互联网(寡头)不再是新秀，而已经是一个个超级巨人，互联网从事的业务范畴也早不再是互联网网站(或者某个手机APP)，而是向各行各业、全球各地快速渗透、影响、控制乃至颠覆各类传统企业。</p><p>　　在第三波信息化革命浪潮下，还没有向互联网转型成功的第一代IT企业，已经由二流市场地位，变得更加艰难，普遍出现业绩下滑，股价下跌，正在一路滑向被淘汰或被兼并的火山口。IT行业的东家——金融行业也开始凌乱了，因为自己培养出来的额娃娃们——互联网巨头已经反过来迅速渗入到金融行业之中，即互联网金融，使得传统金融行业不得不依仗制度保护延缓互联网金融带来的冲击，完全处于守势地位。</p><p>　　IT与金融以外的一部分传统垄断性行业，通过非市场化的行业壁垒试图阻隔互联网巨头于主营业务之外(如矿山、石油、化工、电力、铁路、电信、政府与公共事业)。</p><p>　　回顾军事历史，早到特洛伊城，后到君士坦丁堡，再到“二战”马奇诺防线，短期可能有效的壁垒，没有一个能最终守住，商业也是一样。</p><p>　　其实在数据时代，一些传统行业甚至无法认识到哪些业务才是未来关键的核心业务，往往目前被认为”边缘”的终端用户类业务，才能收集到对未来最有价值的用户数据，而用户数据是未来大数据时代经营的核心。</p><p>　　对于非垄断行性的传统行业(如商业、服务业、制造业、物流业、饮食行业、体育、新闻、游戏业等)，在互联网大潮的冲击下基本上毫无招架之力，在商战上基本上脱逃不开要么“被杀”、要么被”俘虏”的命运。互联网时代最新消失的是渠道企业，之后是百货商场。</p><p>　　为了保持互联网生态的活力，在互联网平台上，依旧会上演造富神话(但很难再是“首富”，因为首富是互联网平台的老板)，相反，对于在这个互联网平台没有成功的企业和个人而言，他们的收益可能连一名互联网公司的员工都不如，保障更是无从谈起。传统行业中的大型企业，在互联网的压力(或诱惑下)，要么成为互联网平台的”VIP用户”被加入到互联网寡头的生态之中，要么靠自身实例进行转换，正面与互联网寡头展开竞争与合作。</p><p>　　在互联网大潮的冲击下，没有那个行业，那个企业或者个人能置身事外，其差异只会是受到冲击时间的先后，以及受到冲击的力度与波次，因为这是整个时代的发展与转型的动力。企业要想继续生存与发展，只有面对互联网大潮，进行积极转型，别无他路！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;本篇文章为云计算的商业动力之企业ICT转型之一&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　基本上所有企业的第一目标都是追逐利益的最大化。&lt;/p&gt;
&lt;p&gt;　　政府与公共事业其实也是如此，只是政府和公共事业的利益是代表国家利益和全
      
    
    </summary>
    
      <category term="业界" scheme="http://dageger.cn/categories/%E4%B8%9A%E7%95%8C/"/>
    
    
      <category term="业界 云计算 互联网" scheme="http://dageger.cn/tags/%E4%B8%9A%E7%95%8C-%E4%BA%91%E8%AE%A1%E7%AE%97-%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS跨页面传值（ui-router）</title>
    <link href="http://dageger.cn/2017/08/23/fe-angular-parames/"/>
    <id>http://dageger.cn/2017/08/23/fe-angular-parames/</id>
    <published>2017-08-23T10:15:28.000Z</published>
    <updated>2018-06-19T07:27:43.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要： Angularjs中通过url传递参数。</p></blockquote><p>今天碰到一个需求，同事开发的业务中需要跳到我的业务中，并传递参数过来，这就需要将参数通过url路由传递过来。在angularjs中该怎样做呢？</p><p>我们知道通常路由控制都是通过引用ui-router库，调用$stateProvider和$urlRouterProvider服务来控制的，想要在路由中传递参数还是要找它们来解决。下面来分别说一下它们各自是怎么工作的。</p><h2 id="urlRouterProvider"><a href="#urlRouterProvider" class="headerlink" title="$urlRouterProvider"></a>$urlRouterProvider</h2><p>$urlRouterProvider一般处理在状态配置中指定的url路由方式之外的 url 请求的路由方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$urlRouterProvider.otherwise(<span class="string">'/index'</span>);</div></pre></td></tr></table></figure><p>这个东西能不能在路由过程中传递参数还没有实践过，等研究清楚了再来细说。</p><h2 id="stateProvider"><a href="#stateProvider" class="headerlink" title="$stateProvider"></a>$stateProvider</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(<span class="string">'search'</span>, &#123;</div><div class="line">    url: <span class="string">'/search'</span>,</div><div class="line">    views: &#123;</div><div class="line">        <span class="string">'header'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">"../common/header/head_nav.html"</span>,</div><div class="line">            controller: <span class="string">'headerCtrl'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'appState'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">'../search/search.html'</span>,</div><div class="line">            controller: <span class="string">"searchCtrl"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这里我们定义了一个路由search，里面包含了ui-view需要加载的视图和controller。现在我们给这个路由添加参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(<span class="string">'search'</span>, &#123;</div><div class="line">    url: <span class="string">'/search/&#123;id&#125;'</span>,</div><div class="line">    views: &#123;</div><div class="line">        <span class="string">'header'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">"../common/header/head_nav.html"</span>,</div><div class="line">            controller: <span class="string">'headerCtrl'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'appState'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">'../search/search.html'</span>,</div><div class="line">            controller: <span class="string">"searchCtrl"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>只需要花括号里面定义参数名就完成了，就是这么简单。而且不用花括号，使用冒号也是可以的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(<span class="string">'search'</span>, &#123;</div><div class="line">    url: <span class="string">'/search/:id'</span>,</div><div class="line">    views: &#123;</div><div class="line">        <span class="string">'header'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">"../common/header/head_nav.html"</span>,</div><div class="line">            controller: <span class="string">'headerCtrl'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'appState'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">'../search/search.html'</span>,</div><div class="line">            controller: <span class="string">"searchCtrl"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>两种方式有什么区别呢？简单说就是花括号的形式功能更加强大，花括号里面是可以添加正则表达式的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(<span class="string">'search'</span>, &#123;</div><div class="line">    url: <span class="string">'/search/&#123;id:[0-9]&#123;1,8&#125;&#125;'</span>,</div><div class="line">    views: &#123;</div><div class="line">        <span class="string">'header'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">"../common/header/head_nav.html"</span>,</div><div class="line">            controller: <span class="string">'headerCtrl'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'appState'</span>: &#123;</div><div class="line">            templateUrl: <span class="string">'../search/search.html'</span>,</div><div class="line">            controller: <span class="string">"searchCtrl"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>甚至你还可以使用传统的http的get方式添加参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url: <span class="string">'/search?id&amp;name'</span></div><div class="line"><span class="comment">//匹配 url: '/search?id=value1&amp;name=value2'</span></div></pre></td></tr></table></figure></p><p>很灵活很强大吧～接下来就是在到达页面获取到这些参数，这需要用到$stateParams服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">controller: <span class="function"><span class="keyword">function</span>(<span class="params">$stateParams</span>)</span>&#123;</div><div class="line">  $stateParams.id</div><div class="line">  $stateParams.name  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果url中没有该参数，我们会得到undefined。<br>如果url中没有该参数，我们会得到undefined。</p><blockquote><p><em>原文链接：<a href="https://yq.aliyun.com/articles/59333" target="_blank" rel="external">https://yq.aliyun.com/articles/59333</a></em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘要： Angularjs中通过url传递参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天碰到一个需求，同事开发的业务中需要跳到我的业务中，并传递参数过来，这就需要将参数通过url路由传递过来。在angularjs中该怎样做呢？&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="angularjs" scheme="http://dageger.cn/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript执行顺序详解</title>
    <link href="http://dageger.cn/2017/08/21/fe-execution-sequence/"/>
    <id>http://dageger.cn/2017/08/21/fe-execution-sequence/</id>
    <published>2017-08-21T10:10:20.000Z</published>
    <updated>2017-09-04T07:14:23.156Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果说，JavaScript引擎的工作机制比较深奥是因为它属于底层行为，那么JavaScript代码执行顺序就比较形象了，因为我们可以直观感觉到这种执行顺序，当然JavaScript代码的执行顺序是比较复杂的，所以在深入JavaScript语言之前也有必要对其进行剖析。</p></blockquote><h3 id="按照HTML文档流顺序执行JavaScript代码"><a href="#按照HTML文档流顺序执行JavaScript代码" class="headerlink" title="按照HTML文档流顺序执行JavaScript代码"></a>按照HTML文档流顺序执行JavaScript代码</h3><p>首先，大家应该清楚，HTML文档在浏览器中的解析过程是这样的：浏览器是按着文档流从上到下逐步解析页面结构和信息的。JavaScript代码作为嵌入的脚本应该也算做HTML文档的组成部分，所以JavaScript代码在装载时的执行顺序也是根据脚本标签<code>&lt;script&gt;</code>的出现顺序来确定的。</p><h5 id="下面实例可以看到代码是从上到下逐步被解析的"><a href="#下面实例可以看到代码是从上到下逐步被解析的" class="headerlink" title="下面实例可以看到代码是从上到下逐步被解析的"></a>下面实例可以看到代码是从上到下逐步被解析的</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    console.log(&quot;顶部脚本&quot;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        console.log(&quot;头部脚本&quot;);</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    console.log(&quot;页面脚本&quot;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    console.log(&quot;底部脚本&quot;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h5 id="输出结果顺序为："><a href="#输出结果顺序为：" class="headerlink" title="输出结果顺序为："></a>输出结果顺序为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">顶部脚本</div><div class="line">头部脚本</div><div class="line">页面脚本</div><div class="line">底部脚本</div></pre></td></tr></table></figure><h3 id="JavaScript中预编译阶段与执行阶段的顺序关系"><a href="#JavaScript中预编译阶段与执行阶段的顺序关系" class="headerlink" title="JavaScript中预编译阶段与执行阶段的顺序关系"></a>JavaScript中<code>预编译阶段</code>与<code>执行阶段</code>的顺序关系</h3><p> javascript相对于其它语言来说是一种弱类型的语言，在其它如java语言中，程序的执行需要有编译的阶段，而在javascript中也有类似的“预编译阶段”,javascript的预编译是以代码块为范围<code>&lt;script&gt;&lt;/script&gt;</code>，即每遇到一个代码块都会进行预编译,然后再去执行）</p><p>首先科普下javascript中的两种声明方式，var和function，前者声明的是变量，后者声明的是方法。在预编译中，JavaScript对这两种声明做出了两种处理方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var a = &quot;1&quot;;　　　　   //声明变量a</div><div class="line">    function b() &#123;　　　　 //声明方法b</div><div class="line">        alert();</div><div class="line">    &#125;</div><div class="line">    var c = function () &#123; //声明变量c</div><div class="line">        alert();</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>以上代码块中a、c为变量赋值，b为函数声明。当执行以上代码时，首先会进入预编译阶段，对与变量赋值a、c会在内存中开辟一块内存空间并指向变量名，且赋值为undefined；对于函数声明，则同样会进行开辟内存空间，但赋值的对象会将声明的函数赋值给函数名。</p><h5 id="预编译阶段：（PS：不管代码中声明变量和声明函数的顺序如何，在预编译阶段会先声明变量，再声明函数）"><a href="#预编译阶段：（PS：不管代码中声明变量和声明函数的顺序如何，在预编译阶段会先声明变量，再声明函数）" class="headerlink" title="预编译阶段：（PS：不管代码中声明变量和声明函数的顺序如何，在预编译阶段会先声明变量，再声明函数）"></a>预编译阶段：（PS：不管代码中声明变量和声明函数的顺序如何，在预编译阶段会先声明变量，再声明函数）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var a = undefined;</div><div class="line">    var c = undefined;</div><div class="line">    var b = function () &#123;</div><div class="line">        alert();</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h5 id="执行阶段："><a href="#执行阶段：" class="headerlink" title="执行阶段："></a>执行阶段：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    a = &quot;1&quot;;</div><div class="line">    c = function () &#123;</div><div class="line">        alert();</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h5 id="整体执行步骤："><a href="#整体执行步骤：" class="headerlink" title="整体执行步骤："></a>整体执行步骤：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var a = undefined;</div><div class="line">    var c = undefined;</div><div class="line"></div><div class="line">    var b = function () &#123;</div><div class="line">        alert();</div><div class="line">    &#125;;</div><div class="line">    a = &quot;1&quot;;</div><div class="line">    c = function () &#123;</div><div class="line">        alert();</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h5 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var a = &quot;1&quot;;</div><div class="line">    function b() &#123;</div><div class="line">        alert(a);</div><div class="line">        var a = &quot;2&quot;;</div><div class="line">    &#125;</div><div class="line">    b();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><blockquote><p><strong>javascript的预编译阶段</strong><br>1.先预定义变量，再预定义函数<br>2.变量的预编译只作声明，不作初始化，初始化在执行时<br>3.function语句定义的函数，不仅声明了函数名，而且函数体也进行了处理<br>4.匿名函数不会预编译</p></blockquote><h3 id="按块执行JavaScript代码"><a href="#按块执行JavaScript代码" class="headerlink" title="按块执行JavaScript代码"></a>按块执行JavaScript代码</h3><p>如果js代码是由多个<code>&lt;script&gt;</code>组成,他们的执行顺序是怎样?<br>看下面的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var str = &apos;world&apos;;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    function Hello() &#123;</div><div class="line">        alert(&quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>这样，程序被分成了两段，浏览器在解析文档流时，如果遇到第一个<code>script</code>标签，则JavaScript解释器会等到这个代码块都加载完后，先对代码块进行预编译，然后再执行。执行完毕后，浏览器会继续解析下面的HTML文档流，同时JavaScript解释器也准备好处理下一个代码块。</p><p>由于JavaScript是按块执行的，所以如果在一个JavaScript块中调用后面块中声明的变量或函数就会提示语法错误，例如，当JavaScript解释器执行下面代码时就会提示语法错误，显示hello未定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    hello()</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    function hello() &#123;</div><div class="line">        alert(&quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>虽然说，JavaScript是按块执行的，但是不同块都属于同一个全局作用域，也就是说，块之间的变量和函数是可以共享的</p><blockquote><p>在实际项目中，往往需要通过src属性引入多个类库来协同使用，这时候要严格区分各个类库的前后引入顺序</p></blockquote><h3 id="借助事件机制改变JavaScript执行顺序"><a href="#借助事件机制改变JavaScript执行顺序" class="headerlink" title="借助事件机制改变JavaScript执行顺序"></a>借助事件机制改变JavaScript执行顺序</h3><p>由于JavaScript是按块处理代码，同时又遵循HTML文档流的解析顺序，所以在上面示例中会看到这样的语法错误。但是当文档流加载完毕，如果再次访问就不会出现这样的错误。例如，把访问第2块代码中的变量和函数的代码放在页面初始化事件函数中，就不会出现语法错误了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    window.onload = function () &#123;</div><div class="line">        hello()</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    function hello() &#123;</div><div class="line">        alert(&quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>为了安全起见，我们一般在页面初始化完毕之后才允许JavaScript代码执行，这样可以避免网速对JavaScript执行的影响，同时也避开了HTML文档流对于JavaScript执行的限制。</p><p>同时还有注意，如果在一个页面中存在多个windows.onload事件处理函数，则只有最后一个才是有效的，为了解决这个问题，可以把所有脚本或调用函数都放在同一个onload事件处理函数中，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">window.onload = function()&#123;</div><div class="line">    f1();</div><div class="line">    f2();</div><div class="line">    f3();</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>最后，如果文章有什么错误和疑问的地方，请指出。与各位共勉！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果说，JavaScript引擎的工作机制比较深奥是因为它属于底层行为，那么JavaScript代码执行顺序就比较形象了，因为我们可以直观感觉到这种执行顺序，当然JavaScript代码的执行顺序是比较复杂的，所以在深入JavaScript语言之前
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://dageger.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>7 Rules for REST API URI Design</title>
    <link href="http://dageger.cn/2017/08/18/fe-restapi-7-rules/"/>
    <id>http://dageger.cn/2017/08/18/fe-restapi-7-rules/</id>
    <published>2017-08-18T11:50:42.000Z</published>
    <updated>2018-06-19T12:20:23.047Z</updated>
    
    <content type="html"><![CDATA[<p>Before going over the rules for REST API URI design, let’s do a quick overview on some of the terms we are going to talk about.</p><h2 id="URIs"><a href="#URIs" class="headerlink" title="URIs"></a>URIs</h2><p>REST APIs use Uniform Resource Identifiers (URIs) to address resources. On today’s web, URI designs range from masterpieces that clearly communicate the API’s resource model like:</p><p><a href="http://api.example.com/louvre/leonardo-da-vinci/mona-lisa" target="_blank" rel="external">http://api.example.com/louvre/leonardo-da-vinci/mona-lisa</a><br>to those that are much harder for people to understand, such as:<br><a href="http://api.example.com/68dd0-a9d3-11e0-9f1c-0800200c9a66" target="_blank" rel="external">http://api.example.com/68dd0-a9d3-11e0-9f1c-0800200c9a66</a></p><p>Tim Berners-Lee included a note about the opacity of URIs in his “Axioms of Web Architecture” list:</p><blockquote><p>The only thing you can use an identifier for is to refer to an object. When you are not dereferencing, you should not look at the contents of the URI string to gain other information.<br>- Tim Berners-Lee</p></blockquote><p>Clients must follow the linking paradigm of the Web and treat URIs as opaque identifiers.</p><p>REST API designers should create URIs that convey a REST API’s resource model to its potential client developers. In this post, I will try to introduce a set of design rules for REST API URIs.</p><p>Prior diving to the rules, a word about the URI Format as the rules presented in this section pertain to the format of a URI.<br>RFC 3986 defines the generic URI syntax as shown below:</p><p><strong>URI = scheme “://“ authority “/“ path [ “?” query ] [ “#” fragment ]</strong></p><h2 id="Rule-1-A-trailing-forward-slash-should-not-be-included-in-URIs"><a href="#Rule-1-A-trailing-forward-slash-should-not-be-included-in-URIs" class="headerlink" title="Rule #1: A trailing forward slash (/) should not be included in URIs"></a>Rule #1: A trailing forward slash (/) should not be included in URIs</h2><p>This is one the most important rules to follow as the last character within a URI’s path, a forward slash (/) adds no semantic value and may cause confusion. REST API’s should not expect a trailing slash and should not include them in the links that they provide to clients.</p><p>Many web components and frameworks will treat the following two URIs equally:<br><a href="http://api.canvas.com/shapes/" target="_blank" rel="external">http://api.canvas.com/shapes/</a><br><a href="http://api.canvas.com/shapes" target="_blank" rel="external">http://api.canvas.com/shapes</a></p><h4 id="However-every-character-within-a-URI-counts-toward-a-resource’s-unique-identity"><a href="#However-every-character-within-a-URI-counts-toward-a-resource’s-unique-identity" class="headerlink" title="However, every character within a URI counts toward a resource’s unique identity."></a>However, every character within a URI counts toward a resource’s unique identity.</h4><p>Two different URIs map to two different resources. If the URIs differ, then so do the resources, and vice versa. Therefore, a REST API must generate and communicate clean URIs and should be intolerant of any client’s attempts to identify a resource imprecisely.</p><p>More forgiving APIs may redirect clients to URIs without a trailing forward slash (they may also return the 301 – “Moved Permanently” that is used to relocate resources”).</p><h2 id="Rule-2-Forward-slash-separator-must-be-used-to-indicate-a-hierarchical-relationship"><a href="#Rule-2-Forward-slash-separator-must-be-used-to-indicate-a-hierarchical-relationship" class="headerlink" title="Rule #2: Forward slash separator (/) must be used to indicate a hierarchical relationship"></a>Rule #2: Forward slash separator (/) must be used to indicate a hierarchical relationship</h2><p>The forward slash (/) character is used in the path portion of the URI to indicate a hierarchical relationship between resources.</p><p>For example:<br><a href="http://api.canvas.com/shapes/polygons/quadrilaterals/squares" target="_blank" rel="external">http://api.canvas.com/shapes/polygons/quadrilaterals/squares</a></p><h2 id="Rule-3-Hyphens-should-be-used-to-improve-the-readability-of-URIs"><a href="#Rule-3-Hyphens-should-be-used-to-improve-the-readability-of-URIs" class="headerlink" title="Rule #3: Hyphens (-) should be used to improve the readability of URIs"></a>Rule #3: Hyphens (-) should be used to improve the readability of URIs</h2><p>To make your URIs easy for people to scan and interpret, use the hyphen (-) character to improve the readability of names in long path segments. Anywhere you would use a space or hyphen in English, you should use a hyphen in a URI.</p><p>For example:<br><a href="http://api.example.com/blogs/guy-levin/posts/this-is-my-first-post" target="_blank" rel="external">http://api.example.com/blogs/guy-levin/posts/this-is-my-first-post</a></p><h2 id="Rule-4-Underscores-should-not-be-used-in-URIs"><a href="#Rule-4-Underscores-should-not-be-used-in-URIs" class="headerlink" title="Rule #4: Underscores (_) should not be used in URIs"></a>Rule #4: Underscores (_) should not be used in URIs</h2><p>Text viewer applications (browsers, editors, etc.) often underline URIs to provide a visual cue that they are clickable. Depending on the application’s font, the underscore (_) character can either get partially obscured or completely hidden by this underlining.</p><p>To avoid this confusion, use hyphens (-) instead of underscores</p><h2 id="Rule-5-Lowercase-letters-should-be-preferred-in-URI-paths"><a href="#Rule-5-Lowercase-letters-should-be-preferred-in-URI-paths" class="headerlink" title="Rule #5: Lowercase letters should be preferred in URI paths"></a>Rule #5: Lowercase letters should be preferred in URI paths</h2><p>When convenient, lowercase letters are preferred in URI paths since capital letters can sometimes cause problems. RFC 3986 defines URIs as case-sensitive except for the scheme and host components.</p><p>For example:<br><a href="http://api.example.com/my-folder/my-doc" target="_blank" rel="external">http://api.example.com/my-folder/my-doc</a></p><p>HTTP://API.EXAMPLE.COM/my-folder/my-doc<br>This URI is fine. The URI format specification (RFC 3986) considers this URI to be identical to URI #1.</p><p><a href="http://api.example.com/My-Folder/my-doc" target="_blank" rel="external">http://api.example.com/My-Folder/my-doc</a><br>This URI is not the same as URIs 1 and 2, which may cause unnecessary confusion.</p><h2 id="Rule-6-File-extensions-should-not-be-included-in-URIs"><a href="#Rule-6-File-extensions-should-not-be-included-in-URIs" class="headerlink" title="Rule #6: File extensions should not be included in URIs"></a>Rule #6: File extensions should not be included in URIs</h2><p>On the Web, the period (.) character is commonly used to separate the file name and extension portions of a URI.<br>A REST API should not include artificial file extensions in URIs to indicate the format of a message’s entity body. Instead, they should rely on the media type, as communicated through the Content-Type header, to determine how to process the body’s content.</p><p><a href="http://api.college.com/students/3248234/courses/2005/fall.json" target="_blank" rel="external">http://api.college.com/students/3248234/courses/2005/fall.json</a><br><a href="http://api.college.com/students/3248234/courses/2005/fall" target="_blank" rel="external">http://api.college.com/students/3248234/courses/2005/fall</a></p><p>File extensions should not be used to indicate format preference.</p><p>REST API clients should be encouraged to utilize HTTP’s provided format selection mechanism, the Accept request header.</p><p>To enable simple links and easy debugging, a REST API may support media type selection via a query parameter.</p><h2 id="Rule-7-Should-the-endpoint-name-be-singular-or-plural"><a href="#Rule-7-Should-the-endpoint-name-be-singular-or-plural" class="headerlink" title="Rule #7: Should the endpoint name be singular or plural?"></a>Rule #7: Should the endpoint name be singular or plural?</h2><p>The keep-it-simple rule applies here. Although your inner-grammatician will tell you it’s wrong to describe a single instance of a resource using a plural, the pragmatic answer is to keep the URI format consistent and always use a plural.</p><p>Not having to deal with odd pluralization (person/people, goose/geese) makes the life of the API consumer better and is easier for the API provider to implement (as most modern frameworks will natively handle /students and /students/3248234 under a common controller).</p><p>But how do you deal with relations? If a relation can only exist within another resource, RESTful principles provide useful guidance. Let’s look at this with an example. A student has a number of courses. These courses are logically mapped to the /students endpoint as follows:</p><p><a href="http://api.college.com/students/3248234/courses" target="_blank" rel="external">http://api.college.com/students/3248234/courses</a> - Retrieves a list of all courses that are learned by a student with id 3248234.<br><a href="http://api.college.com/students/3248234/courses/physics" target="_blank" rel="external">http://api.college.com/students/3248234/courses/physics</a> - Retrieves course physics for a student with id 3248234.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>When you are designing REST API services, you have to pay attention to resources, those are defined by URIs.</p><p>Each resource in a service or services you are building will have at least one URI identifying it. It’s best when that URI makes sense and adequately describes the resource. URIs should follow a predictable, hierarchical structure to enhance understandability and, therefore, usability: predictable in the sense that they’re consistent, hierarchical in the sense that data has structure—relationships.</p><p>RESTful APIs are written for consumers. The name and structure of URIs should convey meaning to those consumers. By following the above rules, you will create a much cleaner REST APIs with a much happier client. This is not a REST rule or constraint, but it enhances the API.</p><p>I also suggest that you will take a look at <a href="http://blog.restcase.com/5-basic-rest-api-design-guidelines/" target="_blank" rel="external">http://blog.restcase.com/5-basic-rest-api-design-guidelines/</a></p><p>Design for your clients, not for your data.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Before going over the rules for REST API URI design, let’s do a quick overview on some of the terms we are going to talk about.&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="前端" scheme="http://dageger.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="REST API" scheme="http://dageger.cn/tags/REST-API/"/>
    
  </entry>
  
</feed>
